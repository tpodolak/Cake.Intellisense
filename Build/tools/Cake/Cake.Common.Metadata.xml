<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Common.Metadata</name>
    </assembly>
    <members>
        <member name="M:Cake.Common.ArgumentAliasesMetadata.Argument``1(System.String)">
                        <summary>
                        Gets an argument and throws if the argument is missing.
                        </summary>
                        <typeparam name="T">The argument type.</typeparam>
                        
                        <param name="name">The argument name.</param>
                        <returns>The value of the argument.</returns>
                        <example>
                        <code>
                        //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
                        Information("Argument {0}", Argument&lt;string&gt;("myArgument"));
                        var loopCount = Argument&lt;int&gt;("loopCount");
                        for(var index = 0;index&lt;loopCount; index++)
                        {
                            Information("Index {0}", index);
                        }
                        </code>
                        </example>
                        <exception cref="T:Cake.Core.CakeException">Argument value is null.</exception>
                        <exception cref="T:System.ArgumentNullException"><paramref name="context" /> is null.</exception>
                    
        </member>
        <member name="M:Cake.Common.ArgumentAliasesMetadata.Argument``1(System.String,``0)">
                        <summary>
                        Gets an argument and returns the provided <paramref name="defaultValue" /> if the argument is missing.
                        </summary>
                        <typeparam name="T">The argument type.</typeparam>
                        
                        <param name="name">The argument name.</param>
                        <param name="defaultValue">The value to return if the argument is missing.</param>
                        <returns>The value of the argument if it exist; otherwise <paramref name="defaultValue" />.</returns>
                        <example>
                        <code>
                        //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
                        Information("Argument {0}", Argument&lt;string&gt;("myArgument", "is NOT valid"));
                        var loopCount = Argument&lt;int&gt;("loopCount", 10);
                        for(var index = 0;index&lt;loopCount; index++)
                        {
                            Information("Index {0}", index);
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.ArgumentAliasesMetadata.HasArgument(System.String)">
                        <summary>
                        Determines whether or not the specified argument exist.
                        </summary>
                        
                        <param name="name">The argument name.</param>
                        <returns>Whether or not the specified argument exist.</returns>
                        <example>
                        This sample shows how to call the <see cref="M:Cake.Common.ArgumentAliases.HasArgument(Cake.Core.ICakeContext,System.String)" /> method.
                        <code>
                        var argumentName = "myArgument";
                        //Cake.exe .\hasargument.cake -myArgument="is specified"
                        if (HasArgument(argumentName))
                        {
                            Information("{0} is specified", argumentName);
                        }
                        //Cake.exe .\hasargument.cake
                        else
                        {
                            Warning("{0} not specified", argumentName);
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.EnvironmentAliasesMetadata.EnvironmentVariable(System.String)">
                        <summary>
                        Retrieves the value of the environment variable or <c>null</c> if the environment variable does not exist.
                        </summary>
                        <example>
                        <code>
                        Information(EnvironmentVariable("HOME") ?? "Unknown location");
                        </code>
                        </example>
                        
                        <param name="variable">The environment variable.</param>
                        <returns>The environment variable or <c>null</c> if the environment variable does not exist.</returns>
                    
        </member>
        <member name="M:Cake.Common.EnvironmentAliasesMetadata.EnvironmentVariables">
                         <summary>
                         Retrieves all environment variables
                         </summary>
                         <example>
                         <code>
                         var envVars = EnvironmentVariables();
                        
                         string path;
                         if (envVars.TryGetValue("PATH", out path))
                         {
                             Information("Path: {0}", path);
                         }
                        
                         foreach(var envVar in envVars)
                         {
                             Information(
                                 "Key: {0}\tValue: \"{1}\"",
                                 envVar.Key,
                                 envVar.Value
                                 );
                         }
                         </code>
                         </example>
                         
                         <returns>The environment variables</returns>
                    
        </member>
        <member name="M:Cake.Common.EnvironmentAliasesMetadata.HasEnvironmentVariable(System.String)">
                        <summary>
                        Checks for the existence of a value for a given environment variable.
                        </summary>
                        <example>
                        <code>
                        if (HasEnvironmentVariable("SOME_ENVIRONMENT_VARIABLE"))
                        {
                            Information("The environment variable was present.");
                        }
                        </code>
                        </example>
                        
                        <param name="variable">The environment variable.</param>
                        <returns>
                          <c>true</c> if the environment variable exist; otherwise <c>false</c>.
                        </returns>
                    
        </member>
        <member name="M:Cake.Common.EnvironmentAliasesMetadata.IsRunningOnUnix">
                        <summary>
                        Determines whether the build script running on a Unix or Linux based system.
                        </summary>
                        <example>
                        <code>
                        if (IsRunningOnUnix())
                        {
                            Information("Not Windows!");
                        }
                        </code>
                        </example>
                        
                        <returns>
                          <c>true</c> if the build script running on a Unix or Linux based system; otherwise <c>false</c>.
                        </returns>
                    
        </member>
        <member name="M:Cake.Common.EnvironmentAliasesMetadata.IsRunningOnWindows">
                        <summary>
                        Determines whether the build script is running on Windows.
                        </summary>
                        <example>
                        <code>
                        if (IsRunningOnWindows())
                        {
                            Information("Windows!");
                        }
                        </code>
                        </example>
                        
                        <returns>
                          <c>true</c> if the build script is running on Windows; otherwise <c>false</c>.
                        </returns>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartAndReturnProcess(Cake.Core.IO.FilePath)">
                        <summary>
                        Starts the process resource that is specified by the filename.
                        </summary>
                        
                        <param name="fileName">Name of the file.</param>
                        <returns>The newly started process.</returns>
                        <example>
                        <code>
                        using(var process = StartAndReturnProcess("ping"))
                        {
                            process.WaitForExit();
                            // This should output 0 as valid arguments supplied
                            Information("Exit code: {0}", process.GetExitCode());
                        }
                        </code>
                        </example>
                        <exception cref="T:System.ArgumentNullException"><paramref name="context" />, <paramref name="fileName" /> is null.</exception>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartAndReturnProcess(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
                        <summary>
                        Starts the process resource that is specified by the filename and settings.
                        </summary>
                        
                        <param name="fileName">Name of the file.</param>
                        <param name="settings">The settings.</param>
                        <returns>The newly started process.</returns>
                        <example>
                        <code>
                        using(var process = StartAndReturnProcess("ping", new ProcessSettings{ Arguments = "localhost" }))
                        {
                            process.WaitForExit();
                            // This should output 0 as valid arguments supplied
                            Information("Exit code: {0}", process.GetExitCode());
                        }
                        </code>
                        </example>
                        <exception cref="T:System.ArgumentNullException"><paramref name="context" />, <paramref name="fileName" />, or <paramref name="settings" />  is null.</exception>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartProcess(Cake.Core.IO.FilePath)">
                        <summary>
                        Starts the process resource that is specified by the filename.
                        </summary>
                        
                        <param name="fileName">The file name.</param>
                        <returns>The exit code that the started process specified when it terminated.</returns>
                        <example>
                        <code>
                        var exitCodeWithoutArguments = StartProcess("ping");
                        // This should output 1 as argument is missing
                        Information("Exit code: {0}", exitCodeWithoutArguments);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartProcess(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
                        <summary>
                        Starts the process resource that is specified by the filename and settings.
                        </summary>
                        
                        <param name="fileName">Name of the file.</param>
                        <param name="settings">The settings.</param>
                        <returns>The exit code that the started process specified when it terminated.</returns>
                        <example>
                        <code>
                        var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{ Arguments = "localhost" });
                        // This should output 0 as valid arguments supplied
                        Information("Exit code: {0}", exitCodeWithArgument);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartProcess(Cake.Core.IO.FilePath,System.String)">
                        <summary>
                        Starts the process resource that is specified by the filename and arguments
                        </summary>
                        
                        <param name="fileName">Name of the file.</param>
                        <param name="processArguments">The arguments used in the process settings.</param>
                        <returns>The exit code that the started process specified when it terminated.</returns>
                        <example>
                        <code>
                        var exitCodeWithArgument = StartProcess("ping", "localhost");
                        // This should output 0 as valid arguments supplied
                        Information("Exit code: {0}", exitCodeWithArgument);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.ProcessAliasesMetadata.StartProcess(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings,System.Collections.Generic.IEnumerable{System.String}@)">
                         <summary>
                         Starts the process resource that is specified by the filename and settings.
                         </summary>
                         
                         <param name="fileName">Name of the file.</param>
                         <param name="settings">The settings.</param>
                         <param name="redirectedOutput">outputs process output <see cref="P:Cake.Core.IO.ProcessSettings.RedirectStandardOutput">RedirectStandardOutput</see> is true</param>
                         <returns>The exit code that the started process specified when it terminated.</returns>
                         <example>
                         <code>
                         IEnumerable&lt;string&gt; redirectedOutput;
                         var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{
                         Arguments = "localhost",
                         RedirectStandardOutput = true
                         },
                         out redirectedOutput
                         );
                         //Output last line of process output
                         Information("Last line of output: {0}", redirectedOutput.LastOrDefault());
                        
                         // This should output 0 as valid arguments supplied
                         Information("Exit code: {0}", exitCodeWithArgument);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliasesMetadata.ParseAllReleaseNotes(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses all release notes.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <returns>All release notes.</returns>
                        <example>
                        <code>
                        var releaseNotes = ParseAllReleaseNotes("./ReleaseNotes.md");
                        foreach(var releaseNote in releaseNotes)
                        {
                            Information("Version: {0}", releaseNote.Version);
                            foreach(var note in releaseNote.Notes)
                            {
                                Information("\t{0}", note);
                            }
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliasesMetadata.ParseReleaseNotes(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses the latest release notes.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <returns>The latest release notes.</returns>
                        <example>
                        <code>
                        var releaseNote = ParseReleaseNotes("./ReleaseNotes.md");
                        Information("Version: {0}", releaseNote.Version);
                        foreach(var note in releaseNote.Notes)
                        {
                            Information("\t{0}", note);
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.AppVeyor">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorProvider" /> instance that can
                        be used to manipulate the AppVeyor environment.
                        </summary>
                        <example>
                        <code>
                        var isAppVeyorBuild = AppVeyor.IsRunningOnAppVeyor;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.AppVeyor" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.Bamboo">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.Bamboo.BambooProvider" /> instance that can
                        be used to manipulate the Bamboo environment.
                        </summary>
                        <example>
                        <code>
                        var isBambooBuild = Bamboo.IsRunningOnBamboo;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.Bamboo" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.BitbucketPipelines">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.BitbucketPipelines.BitbucketPipelinesProvider" /> instance that can be used to
                        obtain information from the Bitbucket Pipelines environment.
                        </summary>
                        <example>
                        <code>
                        var isBitbucketPipelinesBuild = BitbucketPipelines.IsRunningOnBitbucketPipelines;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.BitbucketPipelines" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.Bitrise">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.Bitrise.BitriseProvider" /> instance that can be used to
                        obtain information from the Bitrise environment.
                        </summary>
                        <example>
                        <code>
                        var isBitriseBuild = Bitrise.IsRunningOnBitrise;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.Bitrise" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.BuildSystem">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.BuildSystem" /> instance that can
                        be used to query for information about the current build system.
                        </summary>
                        <example>
                        <code>
                        var isLocal = BuildSystem.IsLocalBuild;
                        </code>
                        </example>
                        
                        <returns>A <see cref="T:Cake.Common.Build.BuildSystem" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.ContinuaCI">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.ContinuaCI.ContinuaCIProvider" /> instance that can
                        be used to manipulate the Continua CI environment.
                        </summary>
                        <example>
                        <code>
                        var isContinuaCIBuild = ContinuaCI.IsRunningContinuaCI;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.ContinuaCI" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.GitLabCI">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.GitLabCI.GitLabCIProvider" /> instance that can be used to
                        obtain information from the GitLab CI environment.
                        </summary>
                        <example>
                        <code>
                        var isGitLabCIBuild = GitLabCI.IsRunningOnGitLabCI;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.GitLabCI" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.GoCD">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.GoCD.GoCDProvider" /> instance that can be used to
                        obtain information from the Go.CD environment.
                        </summary>
                        <example>
                        <code>
                        var isGoCDBuild = GoCD.IsRunningOnGoCD;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.GoCD" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.Jenkins">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.Jenkins.JenkinsProvider" /> instance that can be used to
                        obtain information from the Jenkins environment.
                        </summary>
                        <example>
                        <code>
                        var isJenkinsBuild = Jenkins.IsRunningOnJenkins;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.Jenkins" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.MyGet">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.MyGet.MyGetProvider" /> instance that can
                        be used to manipulate the MyGet environment.
                        </summary>
                        <example>
                        <code>
                        var isMyGetBuild = MyGet.IsRunningOnMyGet;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.MyGet" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.TeamCity">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.TeamCity.TeamCityProvider" /> instance that can
                        be used to manipulate the TeamCity environment.
                        </summary>
                        <example>
                        <code>
                        var isTeamCityBuild = TeamCity.IsRunningOnTeamCity;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.TeamCity" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.TFBuild">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.TFBuild.TFBuildProvider" /> instance that can be used to
                        obtain information from the Team Foundation Build environment.
                        </summary>
                        <example>
                        <code>
                        var isTFSBuild = TFBuild.IsRunningOnTFS;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.TFBuild" /> instance.</returns>
                    
        </member>
        <member name="P:Cake.Common.Build.BuildSystemAliasesMetadata.TravisCI">
                        <summary>
                        Gets a <see cref="T:Cake.Common.Build.TravisCI.TravisCIProvider" /> instance that can be used to
                        obtain information from the Travis CI environment.
                        </summary>
                        <example>
                        <code>
                        var isTravisCIBuild = TravisCI.IsRunningOnTravisCI;
                        </code>
                        </example>
                        
                        <returns>A <see cref="N:Cake.Common.Build.TravisCI" /> instance.</returns>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Debug(System.Object)">
                        <summary>
                        Writes a debug message to the log using the specified value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Debug(new {FirstName = "John", LastName="Doe"});
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Debug(System.String)">
                        <summary>
                        Writes a debug message to the log using the specified string value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Debug("{string}");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Debug(Cake.Core.Diagnostics.LogAction)">
                        <summary>
                        Writes a debug message to the log using the specified log message action.
                        Evaluation message only if verbosity same or more verbose.
                        </summary>
                        
                        <param name="logAction">The function called for message when logging.</param>
                        <example>
                        <code>
                        Debug(logAction=&gt;logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Debug(System.String,System.Object[])">
                        <summary>
                        Writes a debug message to the log using the specified format information.
                        </summary>
                        
                        <param name="format">The format.</param>
                        <param name="args">The arguments.</param>
                        <example>
                        <code>
                        Debug("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Error(System.Object)">
                        <summary>
                        Writes an error message to the log using the specified value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Error(new {FirstName = "John", LastName="Doe"});
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Error(System.String)">
                        <summary>
                        Writes an error message to the log using the specified string value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Error("{string}");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Error(Cake.Core.Diagnostics.LogAction)">
                        <summary>
                        Writes an error message to the log using the specified log message action.
                        Evaluation message only if verbosity same or more verbose.
                        </summary>
                        
                        <param name="logAction">The function called for message when logging.</param>
                        <example>
                        <code>
                        Error(logAction=&gt;logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Error(System.String,System.Object[])">
                        <summary>
                        Writes an error message to the log using the specified format information.
                        </summary>
                        
                        <param name="format">The format.</param>
                        <param name="args">The arguments.</param>
                        <example>
                        <code>
                        Error("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Information(System.Object)">
                        <summary>
                        Writes an informational message to the log using the specified value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Information(new {FirstName = "John", LastName="Doe"});
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Information(System.String)">
                        <summary>
                        Writes an informational message to the log using the specified string value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Information("{string}");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Information(Cake.Core.Diagnostics.LogAction)">
                        <summary>
                        Writes an informational message to the log using the specified log message action.
                        Evaluation message only if verbosity same or more verbose.
                        </summary>
                        
                        <param name="logAction">The function called for message when logging.</param>
                        <example>
                        <code>
                        Information(logAction=&gt;logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Information(System.String,System.Object[])">
                        <summary>
                        Writes an informational message to the log using the specified format information.
                        </summary>
                        
                        <param name="format">The format.</param>
                        <param name="args">The arguments.</param>
                        <example>
                        <code>
                        Information("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Verbose(System.Object)">
                        <summary>
                        Writes a verbose message to the log using the specified value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Verbose(new {FirstName = "John", LastName="Doe"});
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Verbose(System.String)">
                        <summary>
                        Writes a verbose message to the log using the specified string value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Verbose("{string}");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Verbose(Cake.Core.Diagnostics.LogAction)">
                        <summary>
                        Writes a verbose message to the log using the specified log message action.
                        Evaluation message only if verbosity same or more verbose.
                        </summary>
                        
                        <param name="logAction">The function called for message when logging.</param>
                        <example>
                        <code>
                        Verbose(logAction=&gt;logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Verbose(System.String,System.Object[])">
                        <summary>
                        Writes a verbose message to the log using the specified format information.
                        </summary>
                        
                        <param name="format">The format.</param>
                        <param name="args">The arguments.</param>
                        <example>
                        <code>
                        Verbose("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Warning(System.Object)">
                        <summary>
                        Writes an warning message to the log using the specified value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Warning(new {FirstName = "John", LastName="Doe"});
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Warning(System.String)">
                        <summary>
                        Writes an warning message to the log using the specified string value.
                        </summary>
                        
                        <param name="value">The value.</param>
                        <example>
                        <code>
                        Warning("{string}");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Warning(Cake.Core.Diagnostics.LogAction)">
                        <summary>
                        Writes a warning message to the log using the specified log message action.
                        Evaluation message only if verbosity same or more verbose.
                        </summary>
                        
                        <param name="logAction">The function called for message when logging.</param>
                        <example>
                        <code>
                        Warning(logAction=&gt;logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliasesMetadata.Warning(System.String,System.Object[])">
                        <summary>
                        Writes a warning message to the log using the specified format information.
                        </summary>
                        
                        <param name="format">The format.</param>
                        <param name="args">The arguments.</param>
                        <example>
                        <code>
                        Warning("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectories(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
                        <summary>
                        Cleans the specified directories.
                        Cleaning a directory will remove all its content but not the directory itself.
                        </summary>
                        <example>
                        <code>
                        var directoriesToClean = GetDirectories("./src/**/bin/");
                        CleanDirectories(directoriesToClean);
                        </code>
                        </example>
                        
                        <param name="directories">The directory paths.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectories(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Cleans the specified directories.
                        Cleaning a directory will remove all its content but not the directory itself.
                        </summary>
                        <example>
                        <code>
                        var directoriesToClean = new []{
                            "./src/Cake/obj",
                            "./src/Cake.Common/obj"
                        };
                        CleanDirectories(directoriesToClean);
                        </code>
                        </example>
                        
                        <param name="directories">The directory paths.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectories(System.String)">
                        <summary>
                        Cleans the directories matching the specified pattern.
                        Cleaning the directory will remove all its content but not the directory itself.
                        </summary>
                        <example>
                        <code>
                        CleanDirectories("./src/**/bin/debug");
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern to match.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectories(System.String,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
                        <summary>
                        Cleans the directories matching the specified pattern.
                        Cleaning the directory will remove all its content but not the directory itself.
                        </summary>
                        <example>
                        <code>
                        Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
                        fileSystemInfo=&gt;!fileSystemInfo.Path.FullPath.EndsWith(
                                        "node_modules",
                                        StringComparison.OrdinalIgnoreCase);
                        CleanDirectories("./src/**/bin/debug", exclude_node_modules);
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern to match.</param>
                        <param name="predicate">The predicate used to filter directories based on file system information.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectory(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Cleans the specified directory.
                        </summary>
                        <example>
                        <code>
                        CleanDirectory("./src/Cake.Common/obj");
                        </code>
                        </example>
                        
                        <param name="path">The directory path.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CleanDirectory(Cake.Core.IO.DirectoryPath,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
                        <summary>
                        Cleans the specified directory.
                        </summary>
                        <example>
                        <code>
                        CleanDirectory("./src/Cake.Common/obj", fileSystemInfo=&gt;!fileSystemInfo.Hidden);
                        </code>
                        </example>
                        
                        <param name="path">The directory path.</param>
                        <param name="predicate">Predicate used to determine which files/directories should get deleted.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CopyDirectory(Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Copies the contents of a directory, including subdirectories to the specified location.
                        </summary>
                        <example>
                        <code>
                        CopyDirectory("source_path", "destination_path");
                        </code>
                        </example>
                        
                        <param name="source">The source directory path.</param>
                        <param name="destination">The destination directory path.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.CreateDirectory(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Creates the specified directory.
                        </summary>
                        <example>
                        <code>
                        CreateDirectory("publish");
                        </code>
                        </example>
                        
                        <param name="path">The directory path.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.DeleteDirectories(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
                        <summary>
                        Deletes the specified directories.
                        </summary>
                        <example>
                        <code>
                        var directoriesToDelete = new []{
                            "be",
                            "gone"
                        };
                        DeleteDirectories(directoriesToDelete, recursive:true);
                        </code>
                        </example>
                        
                        <param name="directories">The directory paths.</param>
                        <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.DeleteDirectories(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath},System.Boolean)">
                        <summary>
                        Deletes the specified directories.
                        </summary>
                        <example>
                        <code>
                        var directoriesToDelete = new DirectoryPath[]{
                            Directory("be"),
                            Directory("gone")
                        };
                        DeleteDirectories(directoriesToDelete, recursive:true);
                        </code>
                        </example>
                        
                        <param name="directories">The directory paths.</param>
                        <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.DeleteDirectory(Cake.Core.IO.DirectoryPath,System.Boolean)">
                        <summary>
                        Deletes the specified directory.
                        </summary>
                        <example>
                        <code>
                        DeleteDirectory("./be/gone", recursive:true);
                        </code>
                        </example>
                        
                        <param name="path">The directory path.</param>
                        <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.Directory(System.String)">
                         <summary>
                         Gets a directory path from string.
                         </summary>
                         <example>
                         <code>
                         // Get the temp directory.
                         var root = Directory("./");
                         var temp = root + Directory("temp");
                        
                         // Clean the directory.
                         CleanDirectory(temp);
                         </code>
                         </example>
                         
                         <param name="path">The path.</param>
                         <returns>A directory path.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.DirectoryExists(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Determines whether the given path refers to an existing directory.
                        </summary>
                        <example>
                        <code>
                        var dir = "publish";
                        if (!DirectoryExists(dir))
                        {
                            CreateDirectory(dir);
                        }
                        </code>
                        </example>
                        
                        <param name="path">The <see cref="T:Cake.Core.IO.DirectoryPath" /> to check.</param>
                        <returns><c>true</c> if <paramref name="path" /> refers to an existing directory;
                        <c>false</c> if the directory does not exist or an error occurs when trying to
                        determine if the specified path exists.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.EnsureDirectoryExists(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Creates the specified directory if it does not exist.
                        </summary>
                        <example>
                        <code>
                        EnsureDirectoryExists("publish");
                        </code>
                        </example>
                        
                        <param name="path">The directory path.</param>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.MakeAbsolute(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Makes the path absolute (if relative) using the current working directory.
                        </summary>
                        <example>
                        <code>
                        var path = MakeAbsolute(Directory("./resources"));
                        </code>
                        </example>
                        
                        <param name="path">The path.</param>
                        <returns>An absolute directory path.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliasesMetadata.MoveDirectory(Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Moves an existing directory to a new location, providing the option to specify a new directory name.
                        </summary>
                        
                        <param name="directoryPath">The directory path.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        MoveDirectory("mydir", "newparent/newdir");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFile(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
                        <summary>
                        Copies an existing file to a new file, providing the option to specify a new file name.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <param name="targetFilePath">The target file path.</param>
                        <example>
                        <code>
                        CopyFile("test.tmp", "test.txt");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Copies existing files to a new location.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        var files = GetFiles("./**/Cake.*");
                        CopyFiles(files, "destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.Collections.Generic.IEnumerable{System.String},Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Copies existing files to a new location.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        CreateDirectory("destination");
                        var files = new [] {
                            "Cake.exe",
                            "Cake.pdb"
                        };
                        CopyFiles(files, "destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.String,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Copies all files matching the provided pattern to a new location.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        CopyFiles("Cake.*", "./publish");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath,System.Boolean)">
                        <summary>
                        Copies existing files to a new location.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <param name="preserveFolderStructure">Keep the folder structure.</param>
                        <example>
                        <code>
                        var files = GetFiles("./**/Cake.*");
                        CopyFiles(files, "destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.Collections.Generic.IEnumerable{System.String},Cake.Core.IO.DirectoryPath,System.Boolean)">
                        <summary>
                        Copies existing files to a new location.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <param name="preserveFolderStructure">Keep the folder structure.</param>
                        <example>
                        <code>
                        CreateDirectory("destination");
                        var files = new [] {
                            "Cake.exe",
                            "Cake.pdb"
                        };
                        CopyFiles(files, "destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFiles(System.String,Cake.Core.IO.DirectoryPath,System.Boolean)">
                        <summary>
                        Copies all files matching the provided pattern to a new location.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <param name="preserveFolderStructure">Keep the folder structure.</param>
                        <example>
                        <code>
                        CopyFiles("Cake.*", "./publish");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.CopyFileToDirectory(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Copies an existing file to a new location.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        CopyFileToDirectory("test.txt", "./targetdir");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.DeleteFile(Cake.Core.IO.FilePath)">
                        <summary>
                        Deletes the specified file.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <example>
                        <code>
                        DeleteFile("deleteme.txt");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.DeleteFiles(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Deletes the specified files.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <example>
                        <code>
                        var files = GetFiles("./destination/Cake.*");
                        DeleteFiles(files);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.DeleteFiles(System.String)">
                        <summary>
                        Deletes the specified files.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        DeleteFiles("./publish/Cake.*");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.File(System.String)">
                         <summary>
                         Gets a file path from string.
                         </summary>
                         <example>
                         <code>
                         // Get the temp file.
                         var root = Directory("./");
                         var temp = root + File("temp");
                        
                         // Delete the file.
                         CleanDirectory(temp);
                         </code>
                         </example>
                         
                         <param name="path">The path.</param>
                         <returns>A file path.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.FileExists(Cake.Core.IO.FilePath)">
                        <summary>
                        Determines whether the given path refers to an existing file.
                        </summary>
                        
                        <param name="filePath">The <see cref="T:Cake.Core.IO.FilePath" /> to check.</param>
                        <returns><c>true</c> if <paramref name="filePath" /> refers to an existing file;
                        <c>false</c> if the file does not exist or an error occurs when trying to
                        determine if the specified file exists.</returns>
                        <example>
                        <code>
                        if (FileExists("findme.txt"))
                        {
                            Information("File exists!");
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.FileSize(Cake.Core.IO.FilePath)">
                        <summary>
                        Gets the size of a file in bytes.
                        </summary>
                        
                        <param name="filePath">The path.</param>
                        <returns>Size of file in bytes or -1 if file doesn't exist.</returns>
                        <example>
                        <code>
                        Information("File size: {0}", FileSize("./build.cake"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.MakeAbsolute(Cake.Core.IO.FilePath)">
                        <summary>
                        Makes the path absolute (if relative) using the current working directory.
                        </summary>
                        
                        <param name="path">The path.</param>
                        <returns>An absolute file path.</returns>
                        <example>
                        <code>
                        var path = MakeAbsolute(File("./resources"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.MoveFile(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
                        <summary>
                        Moves an existing file to a new location, providing the option to specify a new file name.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <param name="targetFilePath">The target file path.</param>
                        <example>
                        <code>
                        MoveFile("test.tmp", "test.txt");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.MoveFiles(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Moves existing files to a new location.
                        </summary>
                        
                        <param name="filePaths">The file paths.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        var files = GetFiles("./publish/Cake.*");
                        MoveFiles(files, "destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.MoveFiles(System.String,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Moves existing files matching the specified pattern to a new location.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        MoveFiles("./publish/Cake.*", "./destination");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.FileAliasesMetadata.MoveFileToDirectory(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Moves an existing file to a new location.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <param name="targetDirectoryPath">The target directory path.</param>
                        <example>
                        <code>
                        MoveFileToDirectory("test.txt", "./targetdir");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliasesMetadata.GetDirectories(System.String)">
                        <summary>
                        Gets all directory matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        var directories = GetDirectories("./src/**/obj/*");
                        foreach(var directory in directories)
                        {
                            Information("Directory: {0}", directory);
                        }
                        </code>
                        </example>
                        
                        <param name="pattern">The glob pattern to match.</param>
                        <returns>A <see cref="T:Cake.Core.IO.DirectoryPathCollection" />.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliasesMetadata.GetDirectories(System.String,System.Func{Cake.Core.IO.IDirectory,System.Boolean})">
                         <summary>
                         Gets all directory matching the specified pattern.
                         </summary>
                         <example>
                         <code>
                         Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
                             fileSystemInfo =&gt; !fileSystemInfo.Path.FullPath.EndsWith(
                                 "node_modules", StringComparison.OrdinalIgnoreCase);
                        
                         var directories = GetDirectories("./src/**/obj/*", exclude_node_modules);
                         foreach(var directory in directories)
                         {
                             Information("Directory: {0}", directory);
                         }
                         </code>
                         </example>
                         
                         <param name="pattern">The glob pattern to match.</param>
                         <param name="predicate">The predicate used to filter directories based on file system information.</param>
                         <returns>A <see cref="T:Cake.Core.IO.DirectoryPathCollection" />.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliasesMetadata.GetFiles(System.String)">
                        <summary>
                        Gets all files matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        var files = GetFiles("./**/Cake.*.dll");
                        foreach(var file in files)
                        {
                            Information("File: {0}", file);
                        }
                        </code>
                        </example>
                        
                        <param name="pattern">The glob pattern to match.</param>
                        <returns>A <see cref="T:Cake.Core.IO.FilePathCollection" />.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliasesMetadata.GetFiles(System.String,System.Func{Cake.Core.IO.IDirectory,System.Boolean})">
                         <summary>
                         Gets all files matching the specified pattern.
                         </summary>
                         <example>
                         <code>
                         Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
                             fileSystemInfo =&gt; !fileSystemInfo.Path.FullPath.EndsWith(
                                 "node_modules", StringComparison.OrdinalIgnoreCase);
                        
                         var files = GetFiles("./**/Cake.*.dll", exclude_node_modules);
                         foreach(var file in files)
                         {
                             Information("File: {0}", file);
                         }
                         </code>
                         </example>
                         
                         <param name="pattern">The glob pattern to match.</param>
                         <param name="predicate">The predicate used to filter directories based on file system information.</param>
                         <returns>A <see cref="T:Cake.Core.IO.FilePathCollection" />.</returns>
                    
        </member>
        <member name="M:Cake.Common.IO.ZipAliasesMetadata.Unzip(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Unzips the specified file
                        </summary>
                        
                        <param name="zipFile">Zip file to unzip.</param>
                        <param name="outputPath">Output path to unzip into.</param>
                        <example>
                        <code>
                        Unzip("Cake.zip", "./cake");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.ZipAliasesMetadata.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
                        <summary>
                        Zips the specified directory.
                        </summary>
                        
                        <param name="rootPath">The root path.</param>
                        <param name="outputPath">The output path.</param>
                        <example>
                        <code>
                        Zip("./publish", "publish.zip");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.ZipAliasesMetadata.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Zips the specified files.
                        </summary>
                        
                        <param name="rootPath">The root path.</param>
                        <param name="outputPath">The output path.</param>
                        <param name="filePaths">The file paths.</param>
                        <example>
                        <code>
                        var files = new [] {
                            "./src/Cake/bin/Debug/Autofac.dll",
                            "./src/Cake/bin/Debug/Cake.Common.dll",
                            "./src/Cake/bin/Debug/Cake.Core.dll",
                            "./src/Cake/bin/Debug/Cake.exe"
                        };
                        Zip("./", "cakebinaries.zip", files);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.ZipAliasesMetadata.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Zips the specified files.
                        </summary>
                        
                        <param name="rootPath">The root path.</param>
                        <param name="outputPath">The output path.</param>
                        <param name="filePaths">The file paths.</param>
                        <example>
                        <code>
                        var files = GetFiles("./**/Cake.*.dll");
                        Zip("./", "cakeassemblies.zip", files);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.IO.ZipAliasesMetadata.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.String)">
                        <summary>
                        Zips the files matching the specified pattern.
                        </summary>
                        
                        <param name="rootPath">The root path.</param>
                        <param name="outputPath">The output path.</param>
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        Zip("./", "xmlfiles.zip", "./*.xml");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.Uri)">
                        <summary>
                        Downloads the specified resource over HTTP to a temporary file.
                        </summary>
                        <example>
                        <code>
                        var address = new Uri("http://www.example.org/index.html");
                        var resource = DownloadFile(address);
                        </code>
                        </example>
                        
                        <param name="address">The URL of file to download.</param>
                        <returns>The path to the downloaded file.</returns>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.String)">
                        <summary>
                        Downloads the specified resource over HTTP to a temporary file.
                        </summary>
                        <example>
                        <code>
                        var resource = DownloadFile("http://www.example.org/index.html");
                        </code>
                        </example>
                        
                        <param name="address">The URL of the resource to download.</param>
                        <returns>The path to the downloaded file.</returns>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.String,Cake.Core.IO.FilePath)">
                        <summary>
                        Downloads the specified resource over HTTP to the specified output path.
                        </summary>
                        <example>
                        <code>
                        var outputPath = File("./index.html");
                        DownloadFile("http://www.example.org/index.html", outputPath);
                        </code>
                        </example>
                        
                        <param name="address">The URL of the resource to download.</param>
                        <param name="outputPath">The output path.</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.Uri,Cake.Common.Net.DownloadFileSettings)">
                        <summary>
                        Downloads the specified resource over HTTP to a temporary file with specified settings.
                        </summary>
                        <example>
                        <code>
                        var address = new Uri("http://www.example.org/index.html");
                        var resource = DownloadFile(address, new DownloadFileSettings()
                        {
                            Username = "bob",
                            Password = "builder"
                        });
                        </code>
                        </example>
                        
                        <param name="address">The URL of file to download.</param>
                        <param name="settings">The settings.</param>
                        <returns>The path to the downloaded file.</returns>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.String,Cake.Common.Net.DownloadFileSettings)">
                        <summary>
                        Downloads the specified resource over HTTP to a temporary file with specified settings.
                        </summary>
                        <example>
                        <code>
                        var resource = DownloadFile("http://www.example.org/index.html", new DownloadFileSettings()
                        {
                            Username = "bob",
                            Password = "builder"
                        });
                        </code>
                        </example>
                        
                        <param name="address">The URL of the resource to download.</param>
                        <param name="settings">The settings.</param>
                        <returns>The path to the downloaded file.</returns>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.Uri,Cake.Core.IO.FilePath,Cake.Common.Net.DownloadFileSettings)">
                        <summary>
                        Downloads the specified resource over HTTP to the specified output path.
                        </summary>
                        <example>
                        <code>
                        var address = new Uri("http://www.example.org/index.html");
                        var outputPath = File("./index.html");
                        DownloadFile(address, outputPath, new DownloadFileSettings()
                        {
                            Username = "bob",
                            Password = "builder"
                        });
                        </code>
                        </example>
                        
                        <param name="address">The URL of the resource to download.</param>
                        <param name="outputPath">The output path.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.DownloadFile(System.String,Cake.Core.IO.FilePath,Cake.Common.Net.DownloadFileSettings)">
                        <summary>
                        Downloads the specified resource over HTTP to the specified output path and settings.
                        </summary>
                        <example>
                        <code>
                        var outputPath = File("./index.html");
                        DownloadFile("http://www.example.org/index.html", outputPath, new DownloadFileSettings()
                        {
                            Username = "bob",
                            Password = "builder"
                        });
                        </code>
                        </example>
                        
                        <param name="address">The URL of the resource to download.</param>
                        <param name="outputPath">The output path.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.UploadFile(System.String,Cake.Core.IO.FilePath)">
                        <summary>
                        Uploads the specified file via a HTTP POST to the specified uri using multipart/form-data.
                        </summary>
                        <example>
                        <code>
                        var address = "http://www.example.org/upload";
                        UploadFile(address, @"path/to/file.txt");
                        </code>
                        </example>
                        
                        <param name="address">The URL of the upload resource.</param>
                        <param name="filePath">The file to upload.</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.UploadFile(System.Uri,Cake.Core.IO.FilePath)">
                        <summary>
                        Uploads the specified file via a HTTP POST to the specified uri using multipart/form-data.
                        </summary>
                        <example>
                        <code>
                        var address = new Uri("http://www.example.org/upload");
                        UploadFile(address, @"path/to/file.txt");
                        </code>
                        </example>
                        
                        <param name="address">The URL of the upload resource.</param>
                        <param name="filePath">The file to upload.</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.UploadFile(System.String,System.Byte[],System.String)">
                        <summary>
                        Uploads the specified byte array via a HTTP POST to the specified uri using multipart/form-data.
                        </summary>
                        <example>
                        <code>
                        var address = "http://www.example.org/upload";
                        UploadFile(address, @"path/to/file.txt");
                        </code>
                        </example>
                        
                        <param name="address">The URL of the upload resource.</param>
                        <param name="data">The data to upload.</param>
                        <param name="fileName">The filename to give the uploaded data</param>
                    
        </member>
        <member name="M:Cake.Common.Net.HttpAliasesMetadata.UploadFile(System.Uri,System.Byte[],System.String)">
                        <summary>
                        Uploads the specified byte array via a HTTP POST to the specified uri using multipart/form-data.
                        </summary>
                        <example>
                        <code>
                        var address = new Uri("http://www.example.org/upload");
                        UploadFile(address, @"path/to/file.txt");
                        </code>
                        </example>
                        
                        <param name="address">The URL of the upload resource.</param>
                        <param name="data">The data to upload.</param>
                        <param name="fileName">The filename to give the uploaded data</param>
                    
        </member>
        <member name="M:Cake.Common.Security.SecurityAliasesMetadata.CalculateFileHash(Cake.Core.IO.FilePath)">
                        <summary>
                        Calculates the hash for a given file using the default (SHA256) algorithm.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <returns>A <see cref="T:Cake.Common.Security.FileHash" /> instance representing the calculated hash.</returns>
                        <example>
                        <code>
                        Information(
                           "Cake executable file SHA256 hash: {0}",
                           CalculateFileHash("Cake.exe").ToHex());
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Security.SecurityAliasesMetadata.CalculateFileHash(Cake.Core.IO.FilePath,Cake.Common.Security.HashAlgorithm)">
                        <summary>
                        Calculates the hash for a given file.
                        </summary>
                        
                        <param name="filePath">The file path.</param>
                        <param name="hashAlgorithm">The hash algorithm to use.</param>
                        <returns>A <see cref="T:Cake.Common.Security.FileHash" /> instance representing the calculated hash.</returns>
                        <example>
                        <code>
                        Information(
                            "Cake executable file MD5 hash: {0}",
                            CalculateFileHash("Cake.exe", HashAlgorithm.MD5).ToHex());
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.SolutionAliasesMetadata.ParseSolution(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses project information from a solution file.
                        </summary>
                        
                        <param name="solutionPath">The solution path.</param>
                        <returns>A parsed solution.</returns>
                        <example>
                        <code>
                        var solutionPath = "./src/Cake.sln";
                        Information("Parsing {0}", solutionPath);
                        var parsedSolution = ParseSolution(solutionPath);
                        foreach(var project in parsedSolution.Projects)
                        {
                            Information(
                                @"Solution project file:
                            Name: {0}
                            Path: {1}
                            Id  : {2}
                            Type: {3}",
                                project.Name,
                                project.Path,
                                project.Id,
                                project.Type
                            );
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectAliasesMetadata.ParseProject(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses project information from project file
                        </summary>
                        
                        <param name="projectPath">The project file path.</param>
                        <returns>A parsed project.</returns>
                        <example>
                        <code>
                        var parsedProject = ParseProject("./src/Cake/Cake.csproj");
                        Information(
                            @"    Parsed project file:
                            Configuration         : {0}
                            Platform              : {1}
                            OutputType            : {2}
                            OutputPath            : {3}
                            RootNameSpace         : {4}
                            AssemblyName          : {5}
                            TargetFrameworkVersion: {6}
                            Files                 : {7}",
                            parsedProject.Configuration,
                            parsedProject.Platform,
                            parsedProject.OutputType,
                            parsedProject.OutputPath,
                            parsedProject.RootNameSpace,
                            parsedProject.AssemblyName,
                            parsedProject.TargetFrameworkVersion,
                            string.Concat(
                                parsedProject
                                    .Files
                                    .Select(
                                        file=&gt;  string.Format(
                                                    "\r\n            {0}",
                                                    file.FilePath
                                                )
                                    )
                            )
                        );
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliasesMetadata.CreateAssemblyInfo(Cake.Core.IO.FilePath,Cake.Common.Solution.Project.Properties.AssemblyInfoSettings)">
                        <summary>
                        Creates an assembly information file.
                        </summary>
                        
                        <param name="outputPath">The output path.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var file = "./SolutionInfo.cs";
                        var version = "0.0.1";
                        var buildNo = "123";
                        var semVersion = string.Concat(version + "-" + buildNo);
                        CreateAssemblyInfo(file, new AssemblyInfoSettings {
                            Product = "SampleProject",
                            Version = version,
                            FileVersion = version,
                            InformationalVersion = semVersion,
                            Copyright = string.Format("Copyright (c) Contoso 2014 - {0}", DateTime.Now.Year)
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliasesMetadata.ParseAssemblyInfo(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses an existing assembly information file.
                        </summary>
                        
                        <param name="assemblyInfoPath">The assembly info path.</param>
                        <returns>The content of the assembly info file.</returns>
                        <example>
                        <code>
                        var assemblyInfo = ParseAssemblyInfo("./SolutionInfo.cs");
                        Information("Version: {0}", assemblyInfo.AssemblyVersion);
                        Information("File version: {0}", assemblyInfo.AssemblyFileVersion);
                        Information("Informational version: {0}", assemblyInfo.AssemblyInformationalVersion);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliasesMetadata.ParseXmlDocExampleCode(Cake.Core.IO.FilePath)">
                        <summary>
                        Parses Xml documentation example code from given path.
                        </summary>
                        
                        <param name="xmlFilePath">The Path to the file to parse.</param>
                        <returns>Parsed example code.</returns>
                        <example>
                        <code>
                        var exampleCodes = ParseXmlDocExampleCode("./Cake.Common.xml");
                        foreach(var exampleCode in exampleCodes)
                        {
                            Information(
                                "{0}\r\n{1}",
                                exampleCode.Name,
                                exampleCode.Code
                            );
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliasesMetadata.ParseXmlDocFilesExampleCode(System.String)">
                        <summary>
                        Parses Xml documentation example code from file(s) using given pattern.
                        </summary>
                        
                        <param name="pattern">The globber file pattern.</param>
                        <returns>Parsed example code.</returns>
                        <example>
                        <code>
                        var filesExampleCodes = ParseXmlDocFilesExampleCode("./Cake.*.xml");
                        foreach(var exampleCode in filesExampleCodes)
                        {
                            Information(
                                "{0}\r\n{1}",
                                exampleCode.Name,
                                exampleCode.Code
                            );
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliasesMetadata.TransformText(System.String)">
                        <summary>
                        Creates a text transformation from the provided template.
                        </summary>
                        
                        <param name="template">The template.</param>
                        <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1" /> representing the provided template.</returns>
                        <example>
                        This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1" /> using
                        the specified template.
                        <code>
                        string text = TransformText("Hello &lt;%subject%&gt;!")
                           .WithToken("subject", "world")
                           .ToString();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliasesMetadata.TransformText(System.String,System.String,System.String)">
                        <summary>
                        Creates a text transformation from the provided template, using the specified placeholder.
                        </summary>
                        
                        <param name="template">The template.</param>
                        <param name="leftPlaceholder">The left placeholder.</param>
                        <param name="rightPlaceholder">The right placeholder.</param>
                        <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1" /> representing the provided template.</returns>
                        <example>
                        This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1" /> using
                        the specified template and placeholder.
                        <code>
                        string text = TransformText("Hello {subject}!", "{", "}")
                           .WithToken("subject", "world")
                           .ToString();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliasesMetadata.TransformTextFile(Cake.Core.IO.FilePath)">
                        <summary>
                        Creates a text transformation from the provided template on disc.
                        </summary>
                        
                        <param name="path">The template file path.</param>
                        <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1" /> representing the provided template.</returns>
                        <example>
                        This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1" /> using
                        the specified template file with the placeholder format <c>&lt;%key%&gt;</c>.
                        <code>
                        string text = TransformTextFile("./template.txt")
                           .WithToken("subject", "world")
                           .ToString();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliasesMetadata.TransformTextFile(Cake.Core.IO.FilePath,System.String,System.String)">
                        <summary>
                        Creates a text transformation from the provided template on disc, using the specified placeholder.
                        </summary>
                        
                        <param name="path">The template file path.</param>
                        <param name="leftPlaceholder">The left placeholder.</param>
                        <param name="rightPlaceholder">The right placeholder.</param>
                        <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1" /> representing the provided template.</returns>
                        <example>
                        This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1" /> using
                        the specified template file and placeholder.
                        <code>
                        string text = TransformTextFile("./template.txt", "{", "}")
                           .WithToken("subject", "world")
                           .ToString();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildAliasesMetadata.DotNetBuild(Cake.Core.IO.FilePath)">
                        <summary>
                        Builds the specified solution using MSBuild or XBuild.
                        </summary>
                        <example>
                        <code>
                        DotNetBuild("./project/project.sln");
                        </code>
                        </example>
                        
                        <param name="solution">The solution.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildAliasesMetadata.DotNetBuild(Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.DotNetBuildSettings})">
                        <summary>
                        Builds the specified solution using MSBuild or XBuild.
                        </summary>
                        <example>
                        <code>
                        DotNetBuild("./project/project.sln", settings =&gt;
                            settings.SetConfiguration("Debug")
                                .SetVerbosity(Core.Diagnostics.Verbosity.Minimal)
                                .WithTarget("Build")
                                .WithProperty("TreatWarningsAsErrors","true"));
                        </code>
                        </example>
                        
                        <param name="solution">The solution.</param>
                        <param name="configurator">The configurator.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliasesMetadata.CakeExecuteExpression(System.String)">
                        <summary>
                        Executes Cake expression out of process
                        </summary>
                        
                        <param name="cakeExpression">The cake expression</param>
                        <example>
                        <code>
                        CakeExecuteExpression("Information(\"Hello {0}\", \"World\");");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliasesMetadata.CakeExecuteExpression(System.String,Cake.Common.Tools.Cake.CakeSettings)">
                        <summary>
                        Executes Cake expression out of process
                        </summary>
                        
                        <param name="cakeExpression">The cake expression</param>
                        <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings" />.</param>
                        <example>
                        <code>
                        CakeExecuteExpression(
                            "Information(\"Hello {0}!\", Argument&lt;string&gt;(\"name\"));",
                            new CakeSettings {
                                ToolPath="./Cake.exe" ,
                                Arguments = new Dictionary&lt;string, string&gt;{{"name", "World"}}
                                });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliasesMetadata.CakeExecuteScript(Cake.Core.IO.FilePath)">
                        <summary>
                        Executes cake script out of process
                        </summary>
                        
                        <param name="cakeScriptPath">The script file.</param>
                        <example>
                        <code>
                        CakeExecuteScript("./helloworld.cake");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliasesMetadata.CakeExecuteScript(Cake.Core.IO.FilePath,Cake.Common.Tools.Cake.CakeSettings)">
                        <summary>
                        Executes cake script out of process
                        </summary>
                        
                        <param name="cakeScriptPath">The script file.</param>
                        <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings" />.</param>
                        <example>
                        <code>
                        CakeExecuteScript("./helloworld.cake", new CakeSettings{ ToolPath="./Cake.exe" });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyAddSource(System.String,System.String)">
                        <summary>
                        Adds Chocolatey package source using the specified name &amp;source to global user config
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <param name="source">Path to the package(s) source.</param>
                        <example>
                        <code>
                        ChocolateyAddSource("MySource", "http://www.mysource.com");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyAddSource(System.String,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
                        <summary>
                        Adds Chocolatey package source using the specified name, source &amp; settings to global user config
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <param name="source">Path to the package(s) source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyAddSource("MySource", "http://www.mysource.com", new ChocolateySourcesSettings {
                            UserName              = "user",
                            Password              = "password",
                            Priority              = 13,
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyApiKey(System.String,System.String,Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings)">
                        <summary>
                        Sets the Api Key for a Chocolatey Source using the specified settings.
                        </summary>
                        
                        <param name="apiKey">The API Key.</param>
                        <param name="source">The source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyApiKey("myApiKey", "http://www.mysource.com", new ChocolateyApiKeySettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyConfig(System.String,System.String,Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings)">
                        <summary>
                        Sets the config parameter using the specified settings.
                        </summary>
                        
                        <param name="name">The name.</param>
                        <param name="value">The value.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyConfig("cacheLocation", @"c:\temp", new ChocolateyConfigSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyDisableFeature(System.String)">
                        <summary>
                        Disables a Chocolatey Feature using the specified name
                        </summary>
                        
                        <param name="name">Name of the feature.</param>
                        <example>
                        <code>
                        ChocolateyDisableFeature("checkSumFiles");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyDisableFeature(System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
                        <summary>
                        Disables a Chocolatey Feature using the specified name and settings
                        </summary>
                        
                        <param name="name">Name of the feature.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyDisableFeature("checkSumFiles", new ChocolateyFeatureSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyDisableSource(System.String)">
                        <summary>
                        Disables a Chocolatey Source using the specified name
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <example>
                        <code>
                        ChocolateyDisableSource("MySource");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyDisableSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
                        <summary>
                        Disables a Chocolatey Source using the specified name and settings
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyDisableSource("MySource", new ChocolateySourcesSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyEnableFeature(System.String)">
                        <summary>
                        Enables a Chocolatey Feature using the specified name
                        </summary>
                        
                        <param name="name">Name of the feature.</param>
                        <example>
                        <code>
                        ChocolateyEnableFeature("checkSumFiles");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyEnableFeature(System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
                        <summary>
                        Enables a Chocolatey Feature using the specified name and settings
                        </summary>
                        
                        <param name="name">Name of the feature.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyEnableFeature("checkSumFiles", new ChocolateyFeatureSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyEnableSource(System.String)">
                        <summary>
                        Enables a Chocolatey Source using the specified name
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <example>
                        <code>
                        ChocolateyEnableSource("MySource");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyEnableSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
                        <summary>
                        Enables a Chocolatey Source using the specified name and settings
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyEnableSource("MySource", new ChocolateySourcesSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyInstall(System.String)">
                        <summary>
                        Installs a Chocolatey package.
                        </summary>
                        
                        <param name="packageId">The id of the package to install.</param>
                        <example>
                        <code>
                        ChocolateyInstall("MyChocolateyPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyInstall(System.String,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
                        <summary>
                        Installs a Chocolatey package using the specified settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to install.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyInstall("MyChocolateyPackage", new ChocolateyInstallSettings {
                            Source                = true,
                            Version               = "1.2.3",
                            Prerelease            = false,
                            Forcex86              = false,
                            InstallArguments      = "arg1",
                            OverrideArguments     = false,
                            NotSilent             = false,
                            PackageParameters     = "param1",
                            AllowDowngrade        = false,
                            SideBySide            = false,
                            IgnoreDependencies    = false,
                            ForceDependencies     = false,
                            SkipPowerShell        = false,
                            User                  = "user",
                            Password              = "password",
                            IgnoreChecksums       = false,
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyInstallFromConfig(Cake.Core.IO.FilePath)">
                        <summary>
                        Installs Chocolatey packages using the specified package configuration.
                        </summary>
                        
                        <param name="packageConfigPath">The package configuration to install.</param>
                        <example>
                        <code>
                        ChocolateyInstallFromConfig("./tools/packages.config");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyInstallFromConfig(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
                        <summary>
                        Installs Chocolatey packages using the specified package configuration and settings.
                        </summary>
                        
                        <param name="packageConfigPath">The package configuration to install.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyInstallFromConfig("./tools/packages.config", new ChocolateyInstallSettings {
                            Source                = true,
                            Version               = "1.2.3",
                            Prerelease            = false,
                            Forcex86              = false,
                            InstallArguments      = "arg1",
                            OverrideArguments     = false,
                            NotSilent             = false,
                            PackageParameters     = "param1",
                            AllowDowngrade        = false,
                            SideBySide            = false,
                            IgnoreDependencies    = false,
                            ForceDependencies     = false,
                            SkipPowerShell        = false,
                            User                  = "user",
                            Password              = "password",
                            IgnoreChecksums       = false,
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyNew(System.String)">
                        <summary>
                        Generate package specification files for a new package using the default settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to create.</param>
                        <example>
                        <code>
                        ChocolateyNew("MyChocolateyPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyNew(System.String,Cake.Common.Tools.Chocolatey.New.ChocolateyNewSettings)">
                        <summary>
                        Generate package specification files for a new package using the specified settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to create.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyNew("MyChocolateyPackage", new ChocolateyNewSettings {
                            PackageVersion = "1.2.3",
                            MaintainerName = "John Doe",
                            MaintainerRepo = "johndoe"
                        });
                        </code>
                        </example>
                        <example>
                        <code>
                        var settings = new ChocolateyNewSettings {
                            MaintainerName = "John Doe"
                        }
                        settings.AdditionalPropertyValues("Tags", "CustomPackage");
                        ChocolateyNew("MyChocolateyPackage", settings);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPack(Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
                         <summary>
                         Creates a Chocolatey package using the specified settings.
                         </summary>
                         
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var chocolateyPackSettings   = new ChocolateyPackSettings {
                                                             Id                      = "TestChocolatey",
                                                             Title                   = "The tile of the package",
                                                             Version                 = "0.0.0.1",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Summary                 = "Excellent summary of what the package does",
                                                             Description             = "The description of the package",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             PackageSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             ProjectSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             DocsUrl                 = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             MailingListUrl          = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             BugTrackerUrl           = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             Copyright               = "Some company 2015",
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/blob/master/LICENSE.md"),
                                                             RequireLicenseAcceptance= false,
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestChocolatey/master/icons/testchocolatey.png"),
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Files                   = new [] {
                                                                                                  new ChocolateyNuSpecContent {Source = "bin/TestChocolatey.dll", Target = "bin"},
                                                                                               },
                                                             Debug                   = false,
                                                             Verbose                 = false,
                                                             Force                   = false,
                                                             Noop                    = false,
                                                             LimitOutput             = false,
                                                             ExecutionTimeout        = 13,
                                                             CacheLocation           = @"C:\temp",
                                                             AllowUnofficial          = false
                                                         };
                        
                             ChocolateyPack(chocolateyPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPack(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
                         <summary>
                         Creates Chocolatey packages using the specified Nuspec files.
                         </summary>
                         
                         <param name="filePaths">The nuspec file paths.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var chocolateyPackSettings   = new ChocolateyPackSettings {
                                                             Id                      = "TestChocolatey",
                                                             Title                   = "The tile of the package",
                                                             Version                 = "0.0.0.1",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Summary                 = "Excellent summary of what the package does",
                                                             Description             = "The description of the package",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             PackageSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             ProjectSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             DocsUrl                 = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             MailingListUrl          = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             BugTrackerUrl           = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             Copyright               = "Some company 2015",
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/blob/master/LICENSE.md"),
                                                             RequireLicenseAcceptance= false,
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestChocolatey/master/icons/testchocolatey.png"),
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Files                   = new [] {
                                                                                                  new ChocolateyNuSpecContent {Source = "bin/TestChocolatey.dll", Target = "bin"},
                                                                                               },
                                                             Debug                   = false,
                                                             Verbose                 = false,
                                                             Force                   = false,
                                                             Noop                    = false,
                                                             LimitOutput             = false,
                                                             ExecutionTimeout        = 13,
                                                             CacheLocation           = @"C:\temp",
                                                             AllowUnofficial          = false
                                                         };
                        
                             var nuspecFiles = GetFiles("./**/*.nuspec");
                             ChocolateyPack(nuspecFiles, chocolateyPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPack(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
                         <summary>
                         Creates a Chocolatey package using the specified Nuspec file.
                         </summary>
                         
                         <param name="nuspecFilePath">The nuspec file path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var chocolateyPackSettings   = new ChocolateyPackSettings {
                                                             Id                      = "TestChocolatey",
                                                             Title                   = "The tile of the package",
                                                             Version                 = "0.0.0.1",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Summary                 = "Excellent summary of what the package does",
                                                             Description             = "The description of the package",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             PackageSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             ProjectSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             DocsUrl                 = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             MailingListUrl          = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             BugTrackerUrl           = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             Copyright               = "Some company 2015",
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/blob/master/LICENSE.md"),
                                                             RequireLicenseAcceptance= false,
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestChocolatey/master/icons/testchocolatey.png"),
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Files                   = new [] {
                                                                                                  new ChocolateyNuSpecContent {Source = "bin/TestChocolatey.dll", Target = "bin"},
                                                                                               },
                                                             Debug                   = false,
                                                             Verbose                 = false,
                                                             Force                   = false,
                                                             Noop                    = false,
                                                             LimitOutput             = false,
                                                             ExecutionTimeout        = 13,
                                                             CacheLocation           = @"C:\temp",
                                                             AllowUnofficial          = false
                                                         };
                        
                             ChocolateyPack("./nuspec/TestChocolatey.nuspec", chocolateyPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPin(System.String,Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings)">
                        <summary>
                        Pins a Chocolatey package using the specified settings.
                        </summary>
                        
                        <param name="name">The name.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyPin("MyChocolateyPackage", new ChocolateyPinSettings {
                            Version               = "1.2.3",
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPush(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings)">
                         <summary>
                         Pushes Chocolatey packages to a Chocolatey server and publishes them.
                         </summary>
                         
                         <param name="packageFilePaths">The <c>.nupkg</c> file paths.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         // Get the paths to the packages.
                         var packages = GetFiles("./**/*.nupkg");
                        
                         // Push the package.
                         ChocolateyPush(packages, new ChocolateyPushSettings {
                             Source                = "http://example.com/chocolateyfeed",
                             ApiKey                = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
                             Timeout               = 300
                             Debug                 = false,
                             Verbose               = false,
                             Force                 = false,
                             Noop                  = false,
                             LimitOutput           = false,
                             ExecutionTimeout      = 13,
                             CacheLocation         = @"C:\temp",
                             AllowUnofficial        = false
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyPush(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings)">
                         <summary>
                         Pushes a Chocolatey package to a Chocolatey server and publishes it.
                         </summary>
                         
                         <param name="packageFilePath">The <c>.nupkg</c> file path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         // Get the path to the package.
                         var package = "./chocolatey/MyChocolateyPackage.0.0.1.nupkg";
                        
                         // Push the package.
                         ChocolateyPush(package, new ChocolateyPushSettings {
                             Source                = "http://example.com/chocolateyfeed",
                             ApiKey                = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
                             Timeout               = 300
                             Debug                 = false,
                             Verbose               = false,
                             Force                 = false,
                             Noop                  = false,
                             LimitOutput           = false,
                             ExecutionTimeout      = 13,
                             CacheLocation         = @"C:\temp",
                             AllowUnofficial        = false
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyRemoveSource(System.String)">
                        <summary>
                        Removes Chocolatey package source using the specified name &amp; source from global user config
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <example>
                        <code>
                        ChocolateyRemoveSource("MySource");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyRemoveSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
                        <summary>
                        Removes Chocolatey package source using the specified name, source &amp; settings from global user config
                        </summary>
                        
                        <param name="name">Name of the source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyRemoveSource("MySource", new ChocolateySourcesSettings {
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUninstall(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Uninstalls a Chocolatey package.
                        </summary>
                        
                        <param name="packageIds">The ids of the packages to uninstall.</param>
                        <example>
                        <code>
                        ChocolateyUninstall("MyChocolateyPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUninstall(System.String)">
                        <summary>
                        Uninstalls a Chocolatey package.
                        </summary>
                        
                        <param name="packageId">The id of the package to uninstall.</param>
                        <example>
                        <code>
                        ChocolateyUninstall("MyChocolateyPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUninstall(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstallSettings)">
                        <summary>
                        Uninstalls Chocolatey packages using the specified settings.
                        </summary>
                        
                        <param name="packageIds">The ids of the packages to uninstall.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyUninstall("MyChocolateyPackage", new ChocolateyUninstallSettings {
                            Source                  = true,
                            Version                 = "1.2.3",
                            UninstallArguments      = "arg1",
                            OverrideArguments       = false,
                            NotSilent               = false,
                            PackageParameters       = "param1",
                            SideBySide              = false,
                            IgnoreDependencies      = false,
                            ForceDependencies       = false,
                            SkipPowerShell          = false,
                            Debug                   = false,
                            Verbose                 = false,
                            FailOnStandardError     = false,
                            UseSystemPowershell     = false,
                            AllVersions             = false,
                            Force                   = false,
                            Noop                    = false,
                            LimitOutput             = false,
                            ExecutionTimeout        = 13,
                            CacheLocation           = @"C:\temp",
                            AllowUnofficial         = false,
                            GlobalArguments         = false,
                            GlobalPackageParameters = false,
                            IgnorePackageExitCodes  = false,
                            UsePackageExitCodes     = false,
                            UseAutoUninstaller      = false,
                            SkipAutoUninstaller     = false,
                            FailOnAutoUninstaller   = false,
                            IgnoreAutoUninstaller   = false
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUninstall(System.String,Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstallSettings)">
                        <summary>
                        Uninstalls a Chocolatey package using the specified settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to uninstall.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyUninstall("MyChocolateyPackage", new ChocolateyUninstallSettings {
                            Source                  = true,
                            Version                 = "1.2.3",
                            UninstallArguments      = "arg1",
                            OverrideArguments       = false,
                            NotSilent               = false,
                            PackageParameters       = "param1",
                            SideBySide              = false,
                            IgnoreDependencies      = false,
                            ForceDependencies       = false,
                            SkipPowerShell          = false,
                            Debug                   = false,
                            Verbose                 = false,
                            FailOnStandardError     = false,
                            UseSystemPowershell     = false,
                            AllVersions             = false,
                            Force                   = false,
                            Noop                    = false,
                            LimitOutput             = false,
                            ExecutionTimeout        = 13,
                            CacheLocation           = @"C:\temp",
                            AllowUnofficial         = false,
                            GlobalArguments         = false,
                            GlobalPackageParameters = false,
                            IgnorePackageExitCodes  = false,
                            UsePackageExitCodes     = false,
                            UseAutoUninstaller      = false,
                            SkipAutoUninstaller     = false,
                            FailOnAutoUninstaller   = false,
                            IgnoreAutoUninstaller   = false
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUpgrade(System.String)">
                        <summary>
                        Upgrades Chocolatey package.
                        </summary>
                        
                        <param name="packageId">The id of the package to upgrade.</param>
                        <example>
                        <code>
                        ChocolateyUpgrade("MyChocolateyPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliasesMetadata.ChocolateyUpgrade(System.String,Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings)">
                        <summary>
                        Upgrades Chocolatey package using the specified settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to upgrade.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ChocolateyUpgrade("MyChocolateyPackage", new ChocolateyUpgradeSettings {
                            Source                = true,
                            Version               = "1.2.3",
                            Prerelease            = false,
                            Forcex86              = false,
                            InstallArguments      = "arg1",
                            OverrideArguments     = false,
                            NotSilent             = false,
                            PackageParameters     = "param1",
                            AllowDowngrade        = false,
                            SideBySide            = false,
                            IgnoreDependencies    = false,
                            SkipPowerShell        = false,
                            FailOnUnfound        = false,
                            FailOnNotInstalled        = false,
                            User                  = "user",
                            Password              = "password",
                            IgnoreChecksums       = false,
                            Debug                 = false,
                            Verbose               = false,
                            Force                 = false,
                            Noop                  = false,
                            LimitOutput           = false,
                            ExecutionTimeout      = 13,
                            CacheLocation         = @"C:\temp",
                            AllowUnofficial        = false
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotCover.DotCoverAliasesMetadata.DotCoverAnalyse(System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.DotCover.Analyse.DotCoverAnalyseSettings)">
                        <summary>
                        Runs <see href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html#analyse">DotCover Analyse</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="action">The action to run DotCover for.</param>
                        <param name="outputFile">The DotCover output file.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        DotCoverAnalyse(tool =&gt; {
                          tool.XUnit2("./**/App.Tests.dll",
                            new XUnit2Settings {
                              ShadowCopy = false
                            });
                          },
                          new FilePath("./result.xml"),
                          new DotCoverAnalyseSettings()
                            .WithFilter("+:App")
                            .WithFilter("-:App.Tests"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotCover.DotCoverAliasesMetadata.DotCoverCover(System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.DotCover.Cover.DotCoverCoverSettings)">
                        <summary>
                        Runs <see href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html#cover">DotCover Cover</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="action">The action to run DotCover for.</param>
                        <param name="outputFile">The DotCover output file.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        DotCoverCover(tool =&gt; {
                          tool.XUnit2("./**/App.Tests.dll",
                            new XUnit2Settings {
                              ShadowCopy = false
                            });
                          },
                          new FilePath("./result.dcvr"),
                          new DotCoverCoverSettings()
                            .WithFilter("+:App")
                            .WithFilter("-:App.Tests"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotCover.DotCoverAliasesMetadata.DotCoverMerge(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.FilePath)">
                        <summary>
                        Runs <see href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html#merge">DotCover Merge</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="sourceFiles">The list of DotCover coverage snapshot files.</param>
                        <param name="outputFile">The merged output file.</param>
                        <example>
                        <code>
                        DotCoverMerge(new[] {
                            new FilePath("./result1.dcvr"),
                            new FilePath("./result2.dcvr")
                          },
                          new FilePath("./merged.dcvr"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotCover.DotCoverAliasesMetadata.DotCoverMerge(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.FilePath,Cake.Common.Tools.DotCover.Merge.DotCoverMergeSettings)">
                        <summary>
                        Runs <see href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html#merge">DotCover Merge</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="sourceFiles">The list of DotCover coverage snapshot files.</param>
                        <param name="outputFile">The merged output file.</param>
                        <param name="settings">The settings</param>
                        <example>
                        <code>
                        DotCoverMerge(new[] {
                            new FilePath("./result1.dcvr"),
                            new FilePath("./result2.dcvr")
                          },
                          new FilePath("./merged.dcvr"),
                          new DotCoverMergeSettings {
                            LogFile = new FilePath("./log.txt")
                          });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotCover.DotCoverAliasesMetadata.DotCoverReport(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.DotCover.Report.DotCoverReportSettings)">
                        <summary>
                        Runs <see href="https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html#report">DotCover Report</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="sourceFile">The DotCover coverage snapshot file name.</param>
                        <param name="outputFile">The DotCover output file.</param>
                        <param name="settings">The settings</param>
                        <example>
                        <code>
                        DotCoverReport(new FilePath("./result.dcvr"),
                          new FilePath("./result.html"),
                          new DotCoverReportSettings {
                            ReportType = DotCoverReportType.HTML
                          });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreBuild(System.String)">
                        <summary>
                        Build all projects.
                        </summary>
                        
                        <param name="project">The projects path.</param>
                        <example>
                        <code>
                            DotNetCoreBuild("./src/*");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreBuild(System.String,Cake.Common.Tools.DotNetCore.Build.DotNetCoreBuildSettings)">
                         <summary>
                         Build all projects.
                         </summary>
                         
                         <param name="project">The projects path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreBuildSettings
                             {
                                 Framework = "netcoreapp1.0",
                                 Configuration = "Debug",
                                 OutputDirectory = "./artifacts/"
                             };
                        
                             DotNetCoreBuild("./src/*", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreExecute(Cake.Core.IO.FilePath)">
                        <summary>
                        Execute an assembly.
                        </summary>
                        
                        <param name="assemblyPath">The assembly path.</param>
                        <example>
                        <code>
                            DotNetCoreExecute("./bin/Debug/app.dll");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreExecute(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessArgumentBuilder)">
                        <summary>
                        Execute an assembly with arguments in the specific path.
                        </summary>
                        
                        <param name="assemblyPath">The assembly path.</param>
                        <param name="arguments">The arguments.</param>
                        <example>
                        <code>
                            DotNetCoreExecute("./bin/Debug/app.dll", "--arg");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreExecute(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessArgumentBuilder,Cake.Common.Tools.DotNetCore.DotNetCoreSettings)">
                         <summary>
                         Execute an assembly with arguments in the specific path with settings.
                         </summary>
                         
                         <param name="assemblyPath">The assembly path.</param>
                         <param name="arguments">The arguments.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreSettings
                             {
                                 Verbose = true
                             };
                        
                             DotNetCoreExecute("./bin/Debug/app.dll", "--arg", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCorePack(System.String)">
                        <summary>
                        Package all projects.
                        </summary>
                        
                        <param name="project">The projects path.</param>
                        <example>
                        <code>
                            DotNetCorePack("./src/*");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCorePack(System.String,Cake.Common.Tools.DotNetCore.Pack.DotNetCorePackSettings)">
                         <summary>
                         Package all projects.
                         </summary>
                         
                         <param name="project">The projects path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCorePackSettings
                             {
                                 Configuration = "Release",
                                 OutputDirectory = "./artifacts/"
                             };
                        
                             DotNetCorePack("./src/*", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCorePublish(System.String)">
                        <summary>
                        Publish all projects.
                        </summary>
                        
                        <param name="project">The projects path.</param>
                        <example>
                        <code>
                            DotNetCorePublish("./src/*");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCorePublish(System.String,Cake.Common.Tools.DotNetCore.Publish.DotNetCorePublishSettings)">
                         <summary>
                         Publish all projects.
                         </summary>
                         
                         <param name="project">The projects path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCorePublishSettings
                             {
                                 Framework = "netcoreapp1.0",
                                 Configuration = "Release",
                                 OutputDirectory = "./artifacts/"
                             };
                        
                             DotNetCorePublish("./src/*", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRestore">
                        <summary>
                        Restore all NuGet Packages.
                        </summary>
                        
                        <example>
                        <code>
                            DotNetCoreRestore();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRestore(Cake.Common.Tools.DotNetCore.Restore.DotNetCoreRestoreSettings)">
                         <summary>
                         Restore all NuGet Packages with the settings.
                         </summary>
                         
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreRestoreSettings
                             {
                                 Sources = new[] {"https://www.example.com/nugetfeed", "https://www.example.com/nugetfeed2"},
                                 FallbackSources = new[] {"https://www.example.com/fallbacknugetfeed"},
                                 PackagesDirectory = "./packages",
                                 Verbosity = Information,
                                 DisableParallel = true,
                                 InferRuntimes = new[] {"runtime1", "runtime2"}
                             };
                        
                             DotNetCoreRestore(settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRestore(System.String)">
                        <summary>
                        Restore all NuGet Packages in the specified path.
                        </summary>
                        
                        <param name="root">List of projects and project folders to restore. Each value can be: a path to a project.json or global.json file, or a folder to recursively search for project.json files.</param>
                        <example>
                        <code>
                            DotNetCoreRestore("./src/*");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRestore(System.String,Cake.Common.Tools.DotNetCore.Restore.DotNetCoreRestoreSettings)">
                         <summary>
                         Restore all NuGet Packages in the specified path with settings.
                         </summary>
                         
                         <param name="root">List of projects and project folders to restore. Each value can be: a path to a project.json or global.json file, or a folder to recursively search for project.json files.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreRestoreSettings
                             {
                                 Sources = new[] {"https://www.example.com/nugetfeed", "https://www.example.com/nugetfeed2"},
                                 FallbackSources = new[] {"https://www.example.com/fallbacknugetfeed"},
                                 PackagesDirectory = "./packages",
                                 Verbosity = Information,
                                 DisableParallel = true,
                                 InferRuntimes = new[] {"runtime1", "runtime2"}
                             };
                        
                             DotNetCoreRestore("./src/*", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRun">
                        <summary>
                        Run all projects.
                        </summary>
                        
                        <example>
                        <code>
                            DotNetCoreRun();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRun(System.String)">
                        <summary>
                        Run project.
                        </summary>
                        
                        <param name="project">The project path.</param>
                        <example>
                        <code>
                            DotNetCoreRun("./src/Project");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRun(System.String,Cake.Core.IO.ProcessArgumentBuilder)">
                        <summary>
                        Run project with path and arguments.
                        </summary>
                        
                        <param name="project">The project path.</param>
                        <param name="arguments">The arguments.</param>
                        <example>
                        <code>
                            DotNetCoreRun("./src/Project", "--args");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreRun(System.String,Cake.Core.IO.ProcessArgumentBuilder,Cake.Common.Tools.DotNetCore.Run.DotNetCoreRunSettings)">
                         <summary>
                         Run project with settings.
                         </summary>
                         
                         <param name="project">The project path.</param>
                         <param name="arguments">The arguments.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreRunSettings
                             {
                                 Framework = "netcoreapp1.0",
                                 Configuration = "Release"
                             };
                        
                             DotNetCoreRun("./src/Project", "--args", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreTest">
                        <summary>
                        Test project.
                        </summary>
                        
                        <example>
                        <code>
                            DotNetCoreTest();
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreTest(System.String)">
                        <summary>
                        Test project with path.
                        </summary>
                        
                        <param name="project">The project path.</param>
                        <example>
                        <code>
                            DotNetCoreTest("./src/Project");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DotNetCore.DotNetCoreAliasesMetadata.DotNetCoreTest(System.String,Cake.Common.Tools.DotNetCore.Test.DotNetCoreTestSettings)">
                         <summary>
                         Test project with settings.
                         </summary>
                         
                         <param name="project">The project path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var settings = new DotNetCoreTestSettings
                             {
                                 Configuration = "Release"
                             };
                        
                             DotNetCoreTest("./test/Project.Tests", settings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Analyses the specified projects with ReSharper's DupFinder.
                        The files can either be solutions and projects or a source files.
                        </summary>
                        
                        <param name="files">The files to analyze.</param>
                        <example>
                        <code>
                        var projects = GetFiles("./src/**/*.csproj");
                        DupFinder(projects);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(System.String)">
                        <summary>
                        Analyses all files matching the specified pattern with ReSharper's DupFinder.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        DupFinder("*.cs");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(Cake.Core.IO.FilePath)">
                        <summary>
                        Analyses the specified file with ReSharper's DupFinder.
                        The file can either be a solution/project or a source file.
                        </summary>
                        
                        <param name="file">The file to analyze.</param>
                        <example>
                        <code>
                        DupFinder("./src/MySolution.sln");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(System.String,Cake.Common.Tools.DupFinder.DupFinderSettings)">
                         <summary>
                         Analyses all files matching the specified pattern with ReSharper's DupFinder,
                         using the specified settings.
                         </summary>
                         
                         <param name="pattern">The pattern.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var buildOutputDirectory = Directory("./.build");
                         var resharperReportsDirectory = buildOutputDirectory + Directory("_ReSharperReports");
                        
                         DupFinder("*.cs", new DupFinderSettings {
                             OutputFile = resharperReportsDirectory + File("dupfinder-output.xml"),
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.DupFinder.DupFinderSettings)">
                         <summary>
                         Analyses the specified projects with ReSharper's DupFinder using the specified settings.
                         The files can either be solutions and projects or a source files.
                         </summary>
                         
                         <param name="files">The files to analyze.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var buildOutputDirectory = Directory("./.build");
                         var resharperReportsDirectory = buildOutputDirectory + Directory("_ReSharperReports");
                         var rootDirectoryPath = MakeAbsolute(Context.Environment.WorkingDirectory);
                        
                         var projects = GetFiles("./src/**/*.csproj");
                         DupFinder(projects, new DupFinderSettings {
                             ShowStats = true,
                             ShowText = true,
                             ExcludePattern = new String[]
                             {
                                 rootDirectoryPath + "/**/*Designer.cs",
                             },
                             OutputFile = resharperReportsDirectory + File("dupfinder-output.xml"),
                             ThrowExceptionOnFindingDuplicates = true
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinder(Cake.Core.IO.FilePath,Cake.Common.Tools.DupFinder.DupFinderSettings)">
                         <summary>
                         Analyses the specified file with ReSharper's DupFinder using the specified settings.
                         The file can either be a solution/project or a source file.
                         </summary>
                         
                         <param name="file">The file to analyze.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var buildOutputDirectory = Directory("./.build");
                         var resharperReportsDirectory = buildOutputDirectory + Directory("_ReSharperReports");
                         var rootDirectoryPath = MakeAbsolute(Context.Environment.WorkingDirectory);
                        
                         DupFinder("./src/MySolution.sln", new DupFinderSettings {
                             ShowStats = true,
                             ShowText = true,
                             ExcludePattern = new String[]
                             {
                                 rootDirectoryPath + "/**/*Designer.cs",
                             },
                             OutputFile = resharperReportsDirectory + File("dupfinder-output.xml"),
                             ThrowExceptionOnFindingDuplicates = true
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliasesMetadata.DupFinderFromConfig(Cake.Core.IO.FilePath)">
                        <summary>
                        Runs ReSharper's DupFinder using the provided config file.
                        </summary>
                        
                        <param name="configFile">The config file.</param>
                        <example>
                        <code>
                        DupFinderFromConfig("./src/dupfinder.config");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Runs all Fixie tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var assemblies = new [] {
                            "UnitTests1.dll",
                            "UnitTests2.dll"
                        };
                        Fixie(assemblies);
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all Fixie tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var assemblies = GetFiles("./src/UnitTests/*.dll");
                        Fixie(assemblies);
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.String)">
                        <summary>
                        Runs all Fixie tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        Fixie("./src/UnitTests/*.dll");
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.Fixie.FixieSettings)">
                        <summary>
                        Runs all Fixie tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        var assemblies = GetFiles("./src/UnitTests/*.dll");
                        Fixie(assemblies, new FixieSettings {
                            NUnitXml = TestResult.xml
                            });
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.Fixie.FixieSettings)">
                        <summary>
                        Runs all Fixie tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        var assemblies = new [] {
                            "UnitTests1.dll",
                            "UnitTests2.dll"
                        };
                        Fixie(assemblies, new FixieSettings {
                            NUnitXml = TestResult.xml
                            });
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliasesMetadata.Fixie(System.String,Cake.Common.Tools.Fixie.FixieSettings)">
                        <summary>
                        Runs all Fixie tests in the assemblies matching the specified pattern,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        Fixie("./src/UnitTests/*.dll", new FixieSettings {
                            NUnitXml = TestResult.xml
                            });
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkAliasesMetadata.GitLink(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Update pdb files to link all sources.
                        This will allow anyone to step through the source code while debugging without a symbol source server.
                        </summary>
                        
                        <param name="repositoryRootPath">The Solution File to analyze.</param>
                        <example>
                        <code>
                        GitLink("C:/temp/solution");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkAliasesMetadata.GitLink(Cake.Core.IO.DirectoryPath,Cake.Common.Tools.GitLink.GitLinkSettings)">
                        <summary>
                        Update pdb files to link all sources, using specified settings.
                        This will allow anyone to step through the source code while debugging without a symbol source server.
                        </summary>
                        
                        <param name="repositoryRootPath">The path to the Root of the Repository to analyze.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitLink("C:/temp/solution", new GitLinkSettings {
                            RepositoryUrl = "http://mydomain.com",
                            Branch        = "master",
                            ShaHash       = "abcdef",
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerAddAssets(System.String,System.String,System.String,System.String,System.String,System.String)">
                        <summary>
                        Add Assets to an existing release.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="tagName">The tag name.</param>
                        <param name="assets">The assets.</param>
                        <example>
                        <code>
                        GitReleaseManagerAddAssets("user", "password", "owner", "repo", "0.1.0", "c:/temp/asset1.txt,c:/temp/asset2.txt");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerAddAssets(System.String,System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings)">
                        <summary>
                        Add Assets to an existing release using the specified settings.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="tagName">The tag name.</param>
                        <param name="assets">The assets.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseManagerAddAssets("user", "password", "owner", "repo", "0.1.0", "c:/temp/asset1.txt,c:/temp/asset2.txt" new GitReleaseManagerAddAssetsSettings {
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerClose(System.String,System.String,System.String,System.String,System.String)">
                        <summary>
                        Closes the milestone associated with a release.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="milestone">The milestone.</param>
                        <example>
                        <code>
                        GitReleaseManagerClose("user", "password", "owner", "repo", "0.1.0");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerClose(System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings)">
                        <summary>
                        Closes the milestone associated with a release using the specified settings.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="milestone">The milestone.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseManagerClose("user", "password", "owner", "repo", "0.1.0", new GitReleaseManagerCloseMilestoneSettings {
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerCreate(System.String,System.String,System.String,System.String)">
                        <summary>
                        Creates a Package Release.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <example>
                        <code>
                        GitReleaseManagerCreate("user", "password", "owner", "repo");
                        </code>
                        </example>
                        <example>
                        <code>
                        GitReleaseManagerCreate("user", "password", "owner", "repo");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerCreate(System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings)">
                        <summary>
                        Creates a Package Release using the specified settings.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseManagerCreate("user", "password", "owner", "repo", new GitReleaseManagerCreateSettings {
                            Milestone         = "0.1.0",
                            Prerelease        = false,
                            Assets            = "c:/temp/asset1.txt,c:/temp/asset2.txt",
                            TargetCommitish   = "master",
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                        <example>
                        <code>
                        GitReleaseManagerCreate("user", "password", "owner", "repo", new GitReleaseManagerCreateSettings {
                            Name              = "0.1.0",
                            InputFilePath     = "c:/repo/releasenotes.md",
                            Prerelease        = false,
                            Assets            = "c:/temp/asset1.txt,c:/temp/asset2.txt",
                            TargetCommitish   = "master",
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerExport(System.String,System.String,System.String,System.String,Cake.Core.IO.FilePath)">
                        <summary>
                        Exports the release notes.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="fileOutputPath">The output file path.</param>
                        <example>
                        <code>
                        GitReleaseManagerExport("user", "password", "owner", "repo", "c:/temp/releasenotes.md")
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerExport(System.String,System.String,System.String,System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings)">
                        <summary>
                        Exports the release notes using the specified settings.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="fileOutputPath">The output file path.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseManagerExport("user", "password", "owner", "repo", "c:/temp/releasenotes.md", new GitReleaseManagerExportSettings {
                            TagName           = "0.1.0",
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerPublish(System.String,System.String,System.String,System.String,System.String)">
                        <summary>
                        Publishes the release.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="tagName">The tag name.</param>
                        <example>
                        <code>
                        GitReleaseManagerPublish("user", "password", "owner", "repo", "0.1.0");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliasesMetadata.GitReleaseManagerPublish(System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings)">
                        <summary>
                        Publishes the release using the specified settings.
                        </summary>
                        
                        <param name="userName">The user name.</param>
                        <param name="password">The password.</param>
                        <param name="owner">The owner.</param>
                        <param name="repository">The repository.</param>
                        <param name="tagName">The tag name.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseManagerPublish("user", "password", "owner", "repo", "0.1.0", new GitReleaseManagerPublishSettings {
                            TargetDirectory   = "c:/repo",
                            LogFilePath       = "c:/temp/grm.log"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesAliasesMetadata.GitReleaseNotes(Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings)">
                        <summary>
                        Generates a set of release notes based on the commit history of the repository and specified settings.
                        </summary>
                        
                        <param name="outputFile">The output file.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        GitReleaseNotes("c:/temp/releasenotes.md", new GitReleaseNotesSettings {
                            WorkingDirectory         = "c:/temp",
                            Verbose                  = true,
                            IssueTracker             = IssueTracker.GitHub,
                            AllTags                  = true,
                            RepoUserName             = "bob",
                            RepoPassword             = "password",
                            RepoUrl                  = "http://myrepo.co.uk",
                            RepoBranch               = "master",
                            IssueTrackerUrl          = "http://myissuetracker.co.uk",
                            IssueTrackerUserName     = "bob",
                            IssueTrackerPassword     = "password",
                            IssueTrackerProjectId    = "1234",
                            Categories               = "Category1",
                            Version                  = "1.2.3.4",
                            AllLabels                = true
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionAliasesMetadata.GitVersion">
                        <summary>
                        Retrieves the GitVersion output.
                        </summary>
                        
                        <returns>The git version info.</returns>
                        <example>
                        <para>Update the assembly info files for the project.</para>
                        <para>Cake task:</para>
                        <code>
                        <![CDATA[
                        Task("UpdateAssemblyInfo")
                            .Does(() =>
                        {
                            GitVersion(new GitVersionSettings {
                                UpdateAssemblyInfo = true
                            });
                        });
                        ]]>
                        </code>
                        <para>Get the git version info for the project using a dynamic repository.</para>
                        <para>Cake task:</para>
                        <code>
                        <![CDATA[
                        Task("GetVersionInfo")
                            .Does(() =>
                        {
                            var result = GitVersion(new GitVersionSettings {
                                UserName = "MyUser",
                                Password = "MyPassword,
                                Url = "http://git.myhost.com/myproject.git"
                                Branch = "develop"
                                Commit = EnviromentVariable("MY_COMMIT")
                            });
                            // Use result for building nuget packages, setting build server version, etc...
                        });
                        ]]>
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionAliasesMetadata.GitVersion(Cake.Common.Tools.GitVersion.GitVersionSettings)">
                        <summary>
                        Retrieves the GitVersion output.
                        </summary>
                        
                        <param name="settings">The GitVersion settings.</param>
                        <returns>The git version info.</returns>
                        <example>
                        <para>Update the assembly info files for the project.</para>
                        <para>Cake task:</para>
                        <code>
                        <![CDATA[
                        Task("UpdateAssemblyInfo")
                            .Does(() =>
                        {
                            GitVersion(new GitVersionSettings {
                                UpdateAssemblyInfo = true
                            });
                        });
                        ]]>
                        </code>
                        <para>Get the git version info for the project using a dynamic repository.</para>
                        <para>Cake task:</para>
                        <code>
                        <![CDATA[
                        Task("GetVersionInfo")
                            .Does(() =>
                        {
                            var result = GitVersion(new GitVersionSettings {
                                UserName = "MyUser",
                                Password = "MyPassword,
                                Url = "http://git.myhost.com/myproject.git"
                                Branch = "develop"
                                Commit = EnviromentVariable("MY_COMMIT")
                            });
                            // Use result for building nuget packages, setting build server version, etc...
                        });
                        ]]>
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliasesMetadata.ILMerge(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Merges the specified assemblies.
                        </summary>
                        
                        <param name="outputFile">The output file.</param>
                        <param name="primaryAssembly">The primary assembly.</param>
                        <param name="assemblyPaths">The assembly paths.</param>
                        <example>
                        <code>
                        var assemblyPaths = GetFiles("./**/Cake.*.dll");
                        ILMerge("./MergedCake.exe", "./Cake.exe", assemblyPaths);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliasesMetadata.ILMerge(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILMerge.ILMergeSettings)">
                        <summary>
                        Merges the specified assemblies.
                        </summary>
                        
                        <param name="outputFile">The output file.</param>
                        <param name="primaryAssembly">The primary assembly.</param>
                        <param name="assemblyPaths">The assembly paths.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var assemblyPaths = GetFiles("./**/Cake.*.dll");
                        ILMerge(
                            "./MergedCake.exe",
                            "./Cake.exe",
                            assemblyPaths,
                            new ILMergeSettings { Internalize = true });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackAliasesMetadata.ILRepack(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Merges the specified assemblies.
                        </summary>
                        
                        <param name="outputFile">The output file.</param>
                        <param name="primaryAssembly">The primary assembly.</param>
                        <param name="assemblyPaths">The assembly paths.</param>
                        <example>
                        <code>
                        var assemblyPaths = GetFiles("./**/Cake.*.dll");
                        ILRepack("./MergedCake.exe", "./Cake.exe", assemblyPaths);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackAliasesMetadata.ILRepack(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILRepack.ILRepackSettings)">
                        <summary>
                        Merges the specified assemblies.
                        </summary>
                        
                        <param name="outputFile">The output file.</param>
                        <param name="primaryAssembly">The primary assembly.</param>
                        <param name="assemblyPaths">The assembly paths.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var assemblyPaths = GetFiles("./**/Cake.*.dll");
                        ILRepack(
                            "./MergedCake.exe",
                            "./Cake.exe",
                            assemblyPaths,
                            new ILRepackSettings { Internalize = true });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.InnoSetup.InnoSetupAliasesMetadata.InnoSetup(Cake.Core.IO.FilePath)">
                        <summary>
                        Compiles the given Inno Setup script using the default settings.
                        </summary>
                        
                        <param name="scriptFile">The path to the <c>.iss</c> script file to compile.</param>
                        <example>
                        <code>
                        InnoSetup("./src/Cake.iss");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.InnoSetup.InnoSetupAliasesMetadata.InnoSetup(Cake.Core.IO.FilePath,Cake.Common.Tools.InnoSetup.InnoSetupSettings)">
                        <summary>
                        Compiles the given Inno Setup script using the given <paramref name="settings" />.
                        </summary>
                        
                        <param name="scriptFile">The path to the <c>.iss</c> script file to compile.</param>
                        <param name="settings">The <see cref="T:Cake.Common.Tools.InnoSetup.InnoSetupSettings" /> to use.</param>
                        <example>
                        <code>
                        InnoSetup("./src/Cake.iss", new InnoSetupSettings {
                            OutputDir = outputDirectory
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliasesMetadata.InspectCode(Cake.Core.IO.FilePath)">
                        <summary>
                        Analyses the specified solution with Resharper's InspectCode.
                        </summary>
                        
                        <param name="solution">The solution.</param>
                        <example>
                        <code>
                        InspectCode("./src/MySolution.sln");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliasesMetadata.InspectCode(Cake.Core.IO.FilePath,Cake.Common.Tools.InspectCode.InspectCodeSettings)">
                         <summary>
                         Analyses the specified solution with Resharper's InspectCode,
                         using the specified settings.
                         </summary>
                         
                         <param name="solution">The solution.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var buildOutputDirectory = Directory("./.build");
                         var resharperReportsDirectory = buildOutputDirectory + Directory("_ReSharperReports");
                        
                         var msBuildProperties = new Dictionary&lt;string, string&gt;();
                         msBuildProperties.Add("configuration", configuration);
                         msBuildProperties.Add("platform", "AnyCPU");
                        
                         InspectCode("./MySolution.sln", new InspectCodeSettings {
                             SolutionWideAnalysis = true,
                             Profile = "./MySolution.sln.DotSettings",
                             MsBuildProperties = msBuildProperties,
                             OutputFile = resharperReportsDirectory + File("inspectcode-output.xml"),
                             ThrowExceptionOnFindingViolations = true
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliasesMetadata.InspectCodeFromConfig(Cake.Core.IO.FilePath)">
                        <summary>
                        Runs ReSharper's InspectCode using the specified config file.
                        </summary>
                        
                        <param name="configFile">The config file.</param>
                        <example>
                        <code>
                        InspectCodeFromConfig("./src/inspectcode.config");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliasesMetadata.MSBuild(Cake.Core.IO.FilePath)">
                        <summary>
                        Builds the specified solution using MSBuild.
                        </summary>
                        
                        <param name="solution">The solution.</param>
                        <example>
                        <code>
                        MSBuild("./src/Cake.sln");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliasesMetadata.MSBuild(Cake.Core.IO.FilePath,Cake.Common.Tools.MSBuild.MSBuildSettings)">
                        <summary>
                        Builds the specified solution using MSBuild.
                        </summary>
                        
                        <param name="solution">The solution to build.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        MSBuild("./src/Cake.sln", new MSBuildSettings {
                            Verbosity = Verbosity.Minimal,
                            ToolVersion = MSBuildToolVersion.VS2015,
                            Configuration = "Release",
                            PlatformTarget = PlatformTarget.MSIL
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliasesMetadata.MSBuild(Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.MSBuild.MSBuildSettings})">
                        <summary>
                        Builds the specified solution using MSBuild.
                        </summary>
                        
                        <param name="solution">The solution to build.</param>
                        <param name="configurator">The settings configurator.</param>
                        <example>
                        <code>
                        MSBuild("./src/Cake.sln", configurator =&gt;
                            configurator.SetConfiguration("Debug")
                                .SetVerbosity(Verbosity.Minimal)
                                .UseToolVersion(MSBuildToolVersion.VS2015)
                                .SetMSBuildPlatform(MSBuildPlatform.x86)
                                .SetPlatformTarget(PlatformTarget.MSIL));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliasesMetadata.MSTest(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all MSTest unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var paths = new List&lt;FilePath&gt;() { "./assemblydir1", "./assemblydir2" };
                        MSTest(paths);
                        </code>
                        </example>
                        
                        <param name="assemblyPaths">The assembly paths.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliasesMetadata.MSTest(System.String)">
                        <summary>
                        Runs all MSTest unit tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        MSTest("./Tests/*.UnitTests.dll");
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliasesMetadata.MSTest(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.MSTest.MSTestSettings)">
                        <summary>
                        Runs all MSTest unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var paths = new List&lt;FilePath&gt;() { "./assemblydir1", "./assemblydir2" };
                        MSTest(paths, new MSTestSettings() { NoIsolation = false });
                        </code>
                        </example>
                        
                        <param name="assemblyPaths">The assembly paths.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliasesMetadata.MSTest(System.String,Cake.Common.Tools.MSTest.MSTestSettings)">
                        <summary>
                        Runs all MSTest unit tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        MSTest("./Tests/*.UnitTests.dll", new MSTestSettings() { NoIsolation = false });
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliasesMetadata.MakeNSIS(Cake.Core.IO.FilePath)">
                        <summary>
                        Compiles the given NSIS script using the default settings.
                        </summary>
                        
                        <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
                        <example>
                        <code>
                        MakeNSIS("./src/Cake.nsi");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliasesMetadata.MakeNSIS(Cake.Core.IO.FilePath,Cake.Common.Tools.NSIS.MakeNSISSettings)">
                        <summary>
                        Compiles the given NSIS script using the given <paramref name="settings" />.
                        </summary>
                        
                        <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
                        <param name="settings">The <see cref="T:Cake.Common.Tools.NSIS.MakeNSISSettings" /> to use.</param>
                        <example>
                        <code>
                        MakeNSIS("./src/Cake.nsi", new MakeNSISSettings {
                            NoConfig = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        NUnit3(new [] { "./src/Example.Tests/bin/Release/Example.Tests.dll" });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        NUnit3(testAssemblies);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.String)">
                        <summary>
                        Runs all NUnit unit tests in the assemblies matching the specified pattern.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        NUnit3("./src/**/bin/Release/*.Tests.dll");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnit3Settings)">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        NUnit3(testAssemblies, new NUnit3Settings {
                            NoResults = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NUnit.NUnit3Settings)">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NUnit3(new [] { "./src/Example.Tests/bin/Release/Example.Tests.dll" }, new NUnit3Settings {
                            NoResults = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3AliasesMetadata.NUnit3(System.String,Cake.Common.Tools.NUnit.NUnit3Settings)">
                        <summary>
                        Runs all NUnit unit tests in the assemblies matching the specified pattern,
                        using the specified settings.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NUnit3("./src/**/bin/Release/*.Tests.dll", new NUnit3Settings {
                            NoResults = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var assemblies = new [] {
                            "UnitTests1.dll",
                            "UnitTests2.dll"
                        };
                        NUnit(assemblies);
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var assemblies = GetFiles("./src/UnitTests/*.dll");
                        NUnit(assemblies);
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.String)">
                        <summary>
                        Runs all NUnit unit tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        NUnit("./src/UnitTests/*.dll");
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnitSettings)">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        var assemblies = GetFiles(""./src/UnitTests/*.dll"");
                        NUnit(assemblies, new NUnitSettings {
                            Timeout = 4000,
                            StopOnError = true
                            });
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NUnit.NUnitSettings)">
                        <summary>
                        Runs all NUnit unit tests in the specified assemblies,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        var assemblies = new [] {
                            "UnitTests1.dll",
                            "UnitTests2.dll"
                        };
                        NUnit(assemblies, new NUnitSettings {
                            Timeout = 4000,
                            StopOnError = true
                            });
                        </code>
                        </example>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliasesMetadata.NUnit(System.String,Cake.Common.Tools.NUnit.NUnitSettings)">
                        <summary>
                        Runs all NUnit unit tests in the assemblies matching the specified pattern,
                        using the specified settings.
                        </summary>
                        <example>
                        <code>
                        NUnit("./src/UnitTests/*.dll", new NUnitSettings {
                            Timeout = 4000,
                            StopOnError = true
                            });
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetAdd(System.String,Cake.Common.Tools.NuGet.Add.NuGetAddSettings)">
                        <summary>
                        Adds a NuGet package using package id and source.
                        </summary>
                        
                        <param name="packageId">The id of the package to add.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetAdd("MyNugetPackage", new NuGetAddSettings({
                            Source = "//bar/packages/"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetAdd(System.String,System.String)">
                        <summary>
                        Adds a NuGet package using package id and source.
                        </summary>
                        
                        <param name="packageId">The id of the package to add.</param>
                        <param name="source">Path to the local feed source.</param>
                        <example>
                        <code>
                        NuGetAdd("MyNugetPackage", "//bar/packages/");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetAddSource(System.String,System.String)">
                         <summary>
                         Adds NuGet package source using the specified name &amp;source to global user config
                         </summary>
                         
                         <param name="name">Name of the source.</param>
                         <param name="source">Path to the package(s) source.</param>
                         <example>
                         <code>
                         var feed = new
                                     {
                                         Name = EnvironmentVariable("PUBLIC_FEED_NAME"),
                                         Source = EnvironmentVariable("PUBLIC_FEED_SOURCE")
                                     };
                        
                         NuGetAddSource(
                             name:feed.Name,
                             source:feed.Source
                         );
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetAddSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
                         <summary>
                         Adds NuGet package source using the specified name, source &amp; settings to global user config
                         </summary>
                         
                         <param name="name">Name of the source.</param>
                         <param name="source">Path to the package(s) source.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var nugetSourceSettings = new NuGetSourcesSettings
                                                     {
                                                         UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                                         Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                                         IsSensitiveSource = true,
                                                         Verbosity = NuGetVerbosity.Detailed
                                                     };
                        
                         var feed = new
                                     {
                                         Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                                         Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                                     };
                        
                         NuGetAddSource(
                             name:feed.Name,
                             source:feed.Source,
                             settings:nugetSourceSettings
                         );
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetHasSource(System.String)">
                        <summary>
                        Checks whether or not a NuGet package source exists in the global user configuration, using the specified source.
                        </summary>
                        
                        <param name="source">Path to the package(s) source.</param>
                        <returns>Whether or not the NuGet package source exists in the global user configuration.</returns>
                        <example>
                          <code>
                        var feed = new
                        {
                            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                        };
                        if (!NuGetHasSource(source:feed.Source))
                        {
                            Information("Source missing");
                        }
                        else
                        {
                            Information("Source already exists");
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetHasSource(System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
                        <summary>
                        Checks whether or not a NuGet package source exists in the global user configuration, using the specified source and settings.
                        </summary>
                        
                        <param name="source">Path to the package(s) source.</param>
                        <param name="settings">The settings.</param>
                        <returns>Whether the specified NuGet package source exist.</returns>
                        <example>
                          <code>
                        var nugetSourceSettings = new NuGetSourcesSettings
                        {
                            UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                            Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                            IsSensitiveSource = true,
                            Verbosity = NuGetVerbosity.Detailed
                        };
                        var feed = new
                        {
                            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                        };
                        if (!NuGetHasSource(
                            source:feed.Source,
                            settings:nugetSourceSettings))
                        {
                            Information("Source missing");
                        }
                        else
                        {
                            Information("Source already exists");
                        }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInit(System.String,System.String)">
                        <summary>
                        Adds all packages from source to destination.
                        </summary>
                        
                        <param name="source">The local feed package source.</param>
                        <param name="destination">The local feed destination source.</param>
                        <example>
                        <code>
                        NuGetInit("//foo/packages", "//bar/packages/");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInit(System.String,System.String,Cake.Common.Tools.NuGet.Init.NuGetInitSettings)">
                        <summary>
                        Adds all packages from source to destination using specified settings.
                        </summary>
                        
                        <param name="source">The local feed package source.</param>
                        <param name="destination">The local feed destination source.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetInit("//foo/packages", "//bar/packages/", new NuGetInitSettings {
                            Expand = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstall(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Installs NuGet packages.
                        </summary>
                        
                        <param name="packageIds">The id's of the package to install.</param>
                        <example>
                        <code>
                        NuGetInstall(new[] { "MyNugetPackage", "OtherNugetPackage" });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstall(System.String)">
                        <summary>
                        Installs a NuGet package.
                        </summary>
                        
                        <param name="packageId">The id of the package to install.</param>
                        <example>
                        <code>
                        NuGetInstall("MyNugetPackage");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstall(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
                        <summary>
                        Installs NuGet packages using the specified settings.
                        </summary>
                        
                        <param name="packageIds">The id's of the package to install.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetInstall(new[] { "MyNugetPackage", "OtherNugetPackage" }, new NuGetInstallSettings {
                            ExcludeVersion  = true,
                            OutputDirectory = "./tools"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstall(System.String,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
                        <summary>
                        Installs a NuGet package using the specified settings.
                        </summary>
                        
                        <param name="packageId">The id of the package to install.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetInstall("MyNugetPackage", new NuGetInstallSettings {
                            ExcludeVersion  = true,
                            OutputDirectory = "./tools"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstallFromConfig(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                         <summary>
                         Installs NuGet packages using the specified package configurations.
                         </summary>
                         
                         <param name="packageConfigPaths">The package configurations to install.</param>
                         <example>
                         <code>
                         var packageConfigs = GetFiles("./**/packages.config");
                        
                         NuGetInstallFromConfig(packageConfigs);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstallFromConfig(Cake.Core.IO.FilePath)">
                        <summary>
                        Installs NuGet packages using the specified package configuration.
                        </summary>
                        
                        <param name="packageConfigPath">The package configuration to install.</param>
                        <example>
                        <code>
                        NuGetInstallFromConfig("./tools/packages.config");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstallFromConfig(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
                         <summary>
                         Installs NuGet packages using the specified package configurations and settings.
                         </summary>
                         
                         <param name="packageConfigPaths">The package configurations to install.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var packageConfigs = GetFiles("./**/packages.config");
                        
                         NuGetInstallFromConfig(packageConfigs, new NuGetInstallSettings {
                             ExcludeVersion  = true,
                             OutputDirectory = "./tools"
                             });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetInstallFromConfig(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
                        <summary>
                        Installs NuGet packages using the specified package configuration and settings.
                        </summary>
                        
                        <param name="packageConfigPath">The package configuration to install.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetInstallFromConfig("./tools/packages.config", new NuGetInstallSettings {
                            ExcludeVersion  = true,
                            OutputDirectory = "./tools"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetPack(Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
                         <summary>
                         Creates a NuGet package using the specified settings.
                         </summary>
                         
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var nuGetPackSettings   = new NuGetPackSettings {
                                                             Id                      = "TestNuget",
                                                             Version                 = "0.0.0.1",
                                                             Title                   = "The tile of the package",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Description             = "The description of the package",
                                                             Summary                 = "Excellent summary of what the package does",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                             Copyright               = "Some company 2015",
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             RequireLicenseAcceptance= false,
                                                             Symbols                 = false,
                                                             NoPackageAnalysis       = true,
                                                             Files                   = new [] {
                                                                                                  new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                               },
                                                             BasePath                = "./src/TestNuget/bin/release",
                                                             OutputDirectory         = "./nuget"
                                                         };
                        
                             NuGetPack(nuGetPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetPack(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
                         <summary>
                         Creates NuGet packages using the specified Nuspec or project files.
                         </summary>
                         
                         <param name="filePaths">The nuspec or project file paths.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var nuGetPackSettings   = new NuGetPackSettings {
                                                             Id                      = "TestNuget",
                                                             Version                 = "0.0.0.1",
                                                             Title                   = "The tile of the package",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Description             = "The description of the package",
                                                             Summary                 = "Excellent summary of what the package does",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                             Copyright               = "Some company 2015",
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             RequireLicenseAcceptance= false,
                                                             Symbols                 = false,
                                                             NoPackageAnalysis       = true,
                                                             Files                   = new [] {
                                                                                                  new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                               },
                                                             BasePath                = "./src/TestNuget/bin/release",
                                                             OutputDirectory         = "./nuget"
                                                         };
                        
                             var nuspecFiles = GetFiles("./**/*.nuspec");
                             NuGetPack(nuspecFiles, nuGetPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetPack(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
                         <summary>
                         Creates a NuGet package using the specified Nuspec or project file.
                         </summary>
                         
                         <param name="filePath">The nuspec or project file path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             var nuGetPackSettings   = new NuGetPackSettings {
                                                             Id                      = "TestNuget",
                                                             Version                 = "0.0.0.1",
                                                             Title                   = "The tile of the package",
                                                             Authors                 = new[] {"John Doe"},
                                                             Owners                  = new[] {"Contoso"},
                                                             Description             = "The description of the package",
                                                             Summary                 = "Excellent summary of what the package does",
                                                             ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                             IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                             LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                             Copyright               = "Some company 2015",
                                                             ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                             Tags                    = new [] {"Cake", "Script", "Build"},
                                                             RequireLicenseAcceptance= false,
                                                             Symbols                 = false,
                                                             NoPackageAnalysis       = true,
                                                             Files                   = new [] {
                                                                                                  new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                               },
                                                             BasePath                = "./src/TestNuget/bin/release",
                                                             OutputDirectory         = "./nuget"
                                                         };
                        
                             NuGetPack("./nuspec/TestNuget.nuspec", nuGetPackSettings);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetPush(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
                         <summary>
                         Pushes NuGet packages to a NuGet server and publishes them.
                         </summary>
                         
                         <param name="packageFilePaths">The <c>.nupkg</c> file paths.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <para>NOTE: Starting with NuGet 3.4.2, the Source parameter is a mandatory parameter.</para>
                         <para>It is strongly recommended that you ALWAYS set the Source property within the <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPushSettings" /> instance.</para>
                         <code>
                         // Get the paths to the packages.
                         var packages = GetFiles("./**/*.nupkg");
                        
                         // Push the package.
                         NuGetPush(packages, new NuGetPushSettings {
                             Source = "http://example.com/nugetfeed",
                             ApiKey = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetPush(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
                         <summary>
                         Pushes a NuGet package to a NuGet server and publishes it.
                         </summary>
                         
                         <param name="packageFilePath">The <c>.nupkg</c> file path.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <para>NOTE: Starting with NuGet 3.4.2, the Source parameter is a mandatory parameter.</para>
                         <para>It is strongly recommended that you ALWAYS set the Source property within the <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPushSettings" /> instance.</para>
                         <code>
                         // Get the path to the package.
                         var package = "./nuget/SlackPRTGCommander.0.0.1.nupkg";
                        
                         // Push the package.
                         NuGetPush(package, new NuGetPushSettings {
                             Source = "http://example.com/nugetfeed",
                             ApiKey = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRemoveSource(System.String,System.String)">
                         <summary>
                         Removes NuGet package source using the specified name &amp; source from global user config
                         </summary>
                         
                         <param name="name">Name of the source.</param>
                         <param name="source">Path to the package(s) source.</param>
                         <example>
                         <code>
                         var feed = new
                                     {
                                         Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                                         Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                                     };
                        
                         NuGetRemoveSource(
                            name:feed.Name,
                            source:feed.Source
                         );
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRemoveSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
                         <summary>
                         Removes NuGet package source using the specified name, source &amp; settings from global user config
                         </summary>
                         
                         <param name="name">Name of the source.</param>
                         <param name="source">Path to the package(s) source.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var nugetSourceSettings = new NuGetSourcesSettings
                                                     {
                                                         UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                                         Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                                         IsSensitiveSource = true,
                                                         Verbosity = NuGetVerbosity.Detailed
                                                     };
                        
                         var feed = new
                                     {
                                         Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                                         Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                                     };
                        
                         NuGetRemoveSource(
                            name:feed.Name,
                            source:feed.Source,
                            settings:nugetSourceSettings
                         );
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRestore(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Restores NuGet packages for the specified targets.
                        </summary>
                        
                        <param name="targetFilePaths">The targets to restore.</param>
                        <example>
                        <code>
                            var solutions = GetFiles("./**/*.sln");
                            NuGetRestore(solutions);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRestore(Cake.Core.IO.FilePath)">
                        <summary>
                        Restores NuGet packages for the specified target.
                        </summary>
                        
                        <param name="targetFilePath">The target to restore.</param>
                        <example>
                        <code>
                            var solutions = GetFiles("./**/*.sln");
                            // Restore all NuGet packages.
                            foreach(var solution in solutions)
                            {
                                Information("Restoring {0}", solution);
                                NuGetRestore(solution);
                            }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRestore(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
                        <summary>
                        Restores NuGet packages using the specified settings.
                        </summary>
                        
                        <param name="targetFilePaths">The targets to restore.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                            var solutions = GetFiles("./**/*.sln");
                            NuGetRestore(solutions, new NuGetRestoreSettings { NoCache = true });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetRestore(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
                        <summary>
                        Restores NuGet packages using the specified settings.
                        </summary>
                        
                        <param name="targetFilePath">The target to restore.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                            var solutions = GetFiles("./**/*.sln");
                            // Restore all NuGet packages.
                            foreach(var solution in solutions)
                            {
                                Information("Restoring {0}", solution);
                                NuGetRestore(solution, new NuGetRestoreSettings { NoCache = true });
                            }
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetSetApiKey(System.String,System.String)">
                        <summary>
                        Installs NuGet packages using the specified API key and source.
                        </summary>
                        <example>
                        <code>
                        NuGetSetApiKey("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", "https://nuget.org/api/v2/");
                        </code>
                        </example>
                        
                        <param name="apiKey">The API key.</param>
                        <param name="source">Server URL where the API key is valid.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetSetApiKey(System.String,System.String,Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
                        <summary>
                        Installs NuGet packages using the specified API key, source and settings.
                        </summary>
                        <example>
                        <code>
                        var setting = new NuGetSetApiKeySettings {
                            Verbosity = NuGetVerbosity.Detailed
                            };
                        NuGetSetApiKey("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", "https://nuget.org/api/v2/", setting);
                        </code>
                        </example>
                        
                        <param name="apiKey">The API key.</param>
                        <param name="source">Server URL where the API key is valid.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetSetProxy(System.String,System.String,System.String)">
                        <summary>
                        Set the proxy settings to be used while connecting to your NuGet feed.
                        </summary>
                        <example>
                        <code>
                        NuGetSetProxy("127.0.0.1:8080", "proxyuser","Pa$$w0rd1");
                        </code>
                        </example>
                        
                        <param name="proxy">The url of the proxy.</param>
                        <param name="username">The username used to access the proxy.</param>
                        <param name="password">The password used to access the proxy.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetSetProxy(System.String,System.String,System.String,Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings)">
                        <summary>
                        Set the proxy settings to be used while connecting to your NuGet feed, including settings.
                        </summary>
                        <example>
                        <code>
                        var setting = new NuGetSetProxySettings {
                            Verbosity = NuGetVerbosity.Detailed
                            };
                        NuGetSetProxy("127.0.0.1:8080", "proxyuser","Pa$$w0rd1", setting);
                        </code>
                        </example>
                        
                        <param name="proxy">The url of the proxy.</param>
                        <param name="username">The username used to access the proxy.</param>
                        <param name="password">The password used to access the proxy.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetUpdate(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                         <summary>
                         Updates NuGet packages.
                         </summary>
                         
                         <param name="targetFiles">The targets to update.</param>
                         <example>
                         <code>
                         var targets = GetFiles("./**/packages.config");
                        
                         NuGetUpdate(targets);
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetUpdate(Cake.Core.IO.FilePath)">
                        <summary>
                        Updates NuGet packages.
                        </summary>
                        
                        <param name="targetFile">The target to update.</param>
                        <example>
                        <code>
                        NuGetUpdate("./tools/packages.config");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetUpdate(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
                         <summary>
                         Updates NuGet packages using the specified settings.
                         </summary>
                         
                         <param name="targetFiles">The targets to update.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                         var targets = GetFiles("./**/packages.config");
                        
                         NuGetUpdate(targets, new NuGetUpdateSettings {
                             Prerelease = true,
                         });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliasesMetadata.NuGetUpdate(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
                        <summary>
                        Updates NuGet packages using the specified settings.
                        </summary>
                        
                        <param name="targetFile">The target to update.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        NuGetUpdate("./tools/packages.config", new NuGetUpdateSettings {
                            Prerelease = true,
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoCreateRelease(System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
                         <summary>
                         Creates a release for the specified Octopus Deploy Project.
                         </summary>
                         
                         <param name="projectName">The name of the project.</param>
                         <param name="settings">The settings.</param>
                         <example>
                         <code>
                             // Minimum required
                             OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                                 Server = "http://octopus-deploy.example",
                                 ApiKey = "API-XXXXXXXXXXXXXXXXXXXX"
                             });
                        
                             OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                                 Server = "http://octopus-deploy.example",
                                 Username = "DeployUser",
                                 Password = "a-very-secure-password"
                             });
                        
                             OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                                 ConfigurationFile = @"C:\OctopusDeploy.config"
                             });
                        
                             // Additional Options
                             OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                                 ToolPath = "./tools/OctopusTools/Octo.exe"
                                 EnableDebugLogging = true,
                                 IgnoreSslErrors = true,
                                 EnableServiceMessages = true, // Enables teamcity services messages when logging
                                 ReleaseNumber = "1.8.2",
                                 DefaultPackageVersion = "1.0.0.0", // All packages in the release should be 1.0.0.0
                                 Packages = new Dictionary&lt;string, string&gt;
                                             {
                                                 { "PackageOne", "1.0.2.3" },
                                                 { "PackageTwo", "5.2.3" }
                                             },
                                 PackagesFolder = @"C:\MyOtherNugetFeed",
                        
                                 // One or the other
                                 ReleaseNotes = "Version 2.0 \n What a milestone we have ...",
                                 ReleaseNotesFile = "./ReleaseNotes.md",
                        
                                 IgnoreExisting = true // if this release number already exists, ignore it
                             });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoDeployRelease(System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseDeploymentSettings)">
                         <summary>
                         Deploys the specified already existing release into a specified environment
                         See <see href="http://docs.octopusdeploy.com/display/OD/Deploying+releases">Octopus Documentation</see> for more details.
                         </summary>
                         
                         <param name="server">The Octopus server URL</param>
                         <param name="apiKey">The user's API key</param>
                         <param name="projectName">Name of the target project</param>
                         <param name="deployTo">Target environment name</param>
                         <param name="releaseNumber">Version number of the release to deploy. Specify "latest" for the latest release</param>
                         <param name="settings">Deployment settings</param>
                         <example>
                         <code>
                             // bare minimum
                             OctoDeployRelease("http://octopus-deploy.example", "API-XXXXXXXXXXXXXXXXXXXX", "MyGreatProject", "Testing", "2.1.15-RC" new OctopusDeployReleaseDeploymentSettings());
                        
                             // All of deployment arguments
                             OctoDeployRelease("http://octopus-deploy.example", "API-XXXXXXXXXXXXXXXXXXXX", "MyGreatProject", "Testing", "2.1.15-RC" new OctopusDeployReleaseDeploymentSettings {
                                 ShowProgress = true,
                                 ForcePackageDownload = true,
                                 WaitForDeployment = true,
                                 DeploymentTimeout = TimeSpan.FromMinutes(1),
                                 CancelOnTimeout = true,
                                 DeploymentChecksLeepCycle = TimeSpan.FromMinutes(77),
                                 GuidedFailure = true,
                                 SpecificMachines = new string[] { "Machine1", "Machine2" },
                                 Force = true,
                                 SkipSteps = new[] { "Step1", "Step2" },
                                 NoRawLog = true,
                                 RawLogFile = "someFile.txt",
                                 DeployAt = new DateTime(2010, 6, 15).AddMinutes(1),
                                 Tenant = new[] { "Tenant1", "Tenant2" },
                                 TenantTags = new[] { "Tag1", "Tag2" },
                             });
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoPack(System.String)">
                        <summary>
                        Packs the specified folder into an Octopus Deploy package.
                        </summary>
                        
                        <param name="id">The package ID.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoPack(System.String,Cake.Common.Tools.OctopusDeploy.OctopusPackSettings)">
                        <summary>
                        Packs the specified folder into an Octopus Deploy package.
                        </summary>
                        
                        <param name="id">The package ID.</param>
                        <param name="settings">The settings</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoPush(System.String,System.String,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.OctopusDeploy.OctopusPushSettings)">
                        <summary>
                        Pushes the specified packages to the Octopus Deploy repository
                        </summary>
                        
                        <param name="server">The Octopus server URL</param>
                        <param name="apiKey">The user's API key</param>
                        <param name="packagePaths">Paths to the packages</param>
                        <param name="settings">The settings</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliasesMetadata.OctoPush(System.String,System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.OctopusDeploy.OctopusPushSettings)">
                        <summary>
                        Pushes the specified package to the Octopus Deploy repository
                        </summary>
                        
                        <param name="server">The Octopus server URL</param>
                        <param name="apiKey">The user's API key</param>
                        <param name="packagePath">Path to the package</param>
                        <param name="settings">The settings</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverAliasesMetadata.OpenCover(System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.OpenCover.OpenCoverSettings)">
                        <summary>
                        Runs <see href="https://github.com/OpenCover/opencover">OpenCover</see>
                        for the specified action and settings.
                        </summary>
                        
                        <param name="action">The action to run OpenCover for.</param>
                        <param name="outputFile">The OpenCover output file.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        OpenCover(tool =&gt; {
                          tool.XUnit2("./**/App.Tests.dll",
                            new XUnit2Settings {
                              ShadowCopy = false
                            });
                          },
                          new FilePath("./result.xml"),
                          new OpenCoverSettings()
                            .WithFilter("+[App]*")
                            .WithFilter("-[App.Tests]*"));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Converts the specified coverage report into human readable form.
                        </summary>
                        
                        <param name="report">The coverage report.</param>
                        <param name="targetDir">The output directory.</param>
                        <example>
                        <code>
                        ReportGenerator("c:/temp/coverage/report.xml", "c:/temp/output");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Converts the specified coverage reports into human readable form.
                        </summary>
                        
                        <param name="reports">The coverage reports.</param>
                        <param name="targetDir">The output directory.</param>
                        <example>
                        <code>
                        ReportGenerator(new[] { "c:/temp/coverage1.xml", "c:/temp/coverage2.xml" }, "c:/temp/output");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(System.String,Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Converts the coverage report specified by the glob pattern into human readable form.
                        </summary>
                        
                        <param name="pattern">The glob pattern.</param>
                        <param name="targetDir">The output directory.</param>
                        <example>
                        <code>
                        ReportGenerator("c:/temp/coverage/*.xml", "c:/temp/output");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
                        <summary>
                        Converts the specified coverage reports into human readable form using the specified settings.
                        </summary>
                        
                        <param name="reports">The coverage reports.</param>
                        <param name="targetDir">The output directory.</param>
                        <param name="settings">The settings.</param>&gt;
                        <example>
                        <code>
                        ReportGenerator(new[] { "c:/temp/coverage1.xml", "c:/temp/coverage2.xml" }, "c:/temp/output", new ReportGeneratorSettings(){
                            ToolPath = "c:/tools/reportgenerator.exe"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
                        <summary>
                        Converts the specified coverage report into human readable form using the specified settings.
                        </summary>
                        
                        <param name="report">The coverage report.</param>
                        <param name="targetDir">The output directory.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ReportGenerator("c:/temp/coverage.xml", "c:/temp/output", new ReportGeneratorSettings(){
                            ToolPath = "c:/tools/reportgenerator.exe"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliasesMetadata.ReportGenerator(System.String,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
                        <summary>
                        Converts the coverage report specified by the glob pattern into human readable form using the specified settings.
                        </summary>
                        
                        <param name="pattern">The glob pattern.</param>
                        <param name="targetDir">The output directory.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        ReportGenerator("c:/temp/coverage/*.xml", "c:/temp/output", new ReportGeneratorSettings(){
                            ToolPath = "c:/tools/reportgenerator.exe"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliasesMetadata.ReportUnit(Cake.Core.IO.DirectoryPath)">
                        <summary>
                        Converts the reports in the specified directory into human readable form.
                        </summary>
                        
                        <param name="inputFolder">The input folder.</param>
                        <example>
                        <para>Provide only an input folder, which will causes ReportUnit to search entire directory for report files.</para>
                        <para>Cake task:</para>
                        <code>
                        ReportUnit("c:/temp");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliasesMetadata.ReportUnit(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
                        <summary>
                        Converts the single specified report into human readable form and outputs to specified file.
                        </summary>
                        
                        <param name="inputFile">The input file.</param>
                        <param name="outputFile">The output file.</param>
                        <example>
                        <para>Provide both input and output file, which will causes ReportUnit to transform only the specific file, and output to the specified location.</para>
                        <para>Cake task:</para>
                        <code>
                        ReportUnit("c:/temp/input", "c:/temp/output");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliasesMetadata.ReportUnit(Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
                        <summary>
                        Converts the reports in the specified directory into human readable form.
                        </summary>
                        
                        <param name="inputFolder">The input folder.</param>
                        <param name="settings">The ReportUnit settings.</param>
                        <example>
                        <para>Provide an input folder and custom ToolPath, which will causes ReportUnit to search entire directory for report files.</para>
                        <para>Cake task:</para>
                        <code>
                        ReportUnit("c:/temp", new ReportUnitSettings(){
                            ToolPath = "c:/tools/reportunit.exe"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliasesMetadata.ReportUnit(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
                        <summary>
                        Converts the single specified report into human readable form and outputs to specified file.
                        </summary>
                        
                        <param name="inputFile">The input file.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="settings">The ReportUnit settings.</param>
                        <example>
                        <para>Provide both input and output file, which will causes ReportUnit to transform only the specific file, and output to the specified location.  Also use a custom path for the reportunit.exe.</para>
                        <para>Cake task:</para>
                        <code>
                        ReportUnit("c:/temp/input", "c:/temp/output", new ReportUnitSettings(){
                            ToolPath = "c:/tools/reportunit.exe"
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliasesMetadata.ReportUnit(Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
                        <summary>
                        Converts the reports in the specified directory into human readable form and outputs to specified folder.
                        </summary>
                        
                        <param name="inputFolder">The input folder.</param>
                        <param name="outputFolder">The output folder.</param>
                        <param name="settings">The ReportUnit settings.</param>
                        <example>
                        <para>Provide both input and output folder, which will causes ReportUnit to search entire directory for report files, and output the results to specified location.</para>
                        <para>Cake task:</para>
                        <code>
                        ReportUnit("c:/temp/input", "c:/temp/output");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseAliasesMetadata.RoundhouseDrop(Cake.Common.Tools.Roundhouse.RoundhouseSettings)">
                        <summary>
                        Executes Roundhouse migration to drop the database using the provided settings.
                        </summary>
                        
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        RoundhouseDrop(new RoundhouseSettings{
                            ServerName = "Sql2008R2",
                            DatabaseName = "AdventureWorks2008R2"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseAliasesMetadata.RoundhouseMigrate(Cake.Common.Tools.Roundhouse.RoundhouseSettings)">
                        <summary>
                        Executes Roundhouse with the given configured settings.
                        </summary>
                        
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        RoundhouseMigrate(new RoundhouseSettings{
                            ServerName = "Sql2008R2",
                            DatabaseName = "AdventureWorks2008R2",
                            SqlFilesDirectory = "./src/sql"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliasesMetadata.Sign(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.SignTool.SignToolSignSettings)">
                        <summary>
                        Signs the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The target assembly.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        Task("Sign")
                            .IsDependentOn("Clean")
                            .IsDependentOn("Restore")
                            .IsDependentOn("Build")
                            .Does(() =&gt;
                        {
                            var files = new string[] { "Core.dll", "Common.dll" };
                            Sign(files, new SignToolSignSettings {
                                    TimeStampUri = new Uri("http://timestamp.digicert.com"),
                                    CertPath = "digitalcertificate.pfx",
                                    Password = "TopSecret"
                            });
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliasesMetadata.Sign(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.SignTool.SignToolSignSettings)">
                        <summary>
                        Signs the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The target assembly.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        Task("Sign")
                            .IsDependentOn("Clean")
                            .IsDependentOn("Restore")
                            .IsDependentOn("Build")
                            .Does(() =&gt;
                        {
                            var files = GetFiles(solutionDir + "/**/bin/" + configuration + "/**/*.exe");
                            Sign(files, new SignToolSignSettings {
                                    TimeStampUri = new Uri("http://timestamp.digicert.com"),
                                    CertPath = "digitalcertificate.pfx",
                                    Password = "TopSecret"
                            });
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliasesMetadata.Sign(Cake.Core.IO.FilePath,Cake.Common.Tools.SignTool.SignToolSignSettings)">
                        <summary>
                        Signs the specified assembly.
                        </summary>
                        
                        <param name="assembly">The target assembly.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        Task("Sign")
                            .IsDependentOn("Clean")
                            .IsDependentOn("Restore")
                            .IsDependentOn("Build")
                            .Does(() =&gt;
                        {
                            var file = new FilePath("Core.dll");
                            Sign(file, new SignToolSignSettings {
                                    TimeStampUri = new Uri("http://timestamp.digicert.com"),
                                    CertPath = "digitalcertificate.pfx",
                                    Password = "TopSecret"
                            });
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliasesMetadata.Sign(System.String,Cake.Common.Tools.SignTool.SignToolSignSettings)">
                        <summary>
                        Signs the specified assembly.
                        </summary>
                        
                        <param name="assembly">The target assembly.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        Task("Sign")
                            .IsDependentOn("Clean")
                            .IsDependentOn("Restore")
                            .IsDependentOn("Build")
                            .Does(() =&gt;
                        {
                            var file = "Core.dll";
                            Sign(file, new SignToolSignSettings {
                                    TimeStampUri = new Uri("http://timestamp.digicert.com"),
                                    CertPath = "digitalcertificate.pfx",
                                    Password = "TopSecret"
                            });
                        });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.SpecFlow.SpecFlowAliasesMetadata.SpecFlowStepDefinitionReport(Cake.Core.IO.FilePath)">
                        <summary>
                        Creates a report that shows the usage and binding status of the steps for the entire project.
                        You can use this report to find both unused code in the automation layer and scenario steps that have no definition yet.
                        See <see href="https://github.com/techtalk/SpecFlow/wiki/Reporting#step-definition-report">SpecFlow Documentation</see> for more information.
                        </summary>
                        
                        <param name="projectFile">The path of the project file containing the feature files.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.SpecFlow.SpecFlowAliasesMetadata.SpecFlowStepDefinitionReport(Cake.Core.IO.FilePath,Cake.Common.Tools.SpecFlow.StepDefinitionReport.SpecFlowStepDefinitionReportSettings)">
                        <summary>
                        Creates a report that shows the usage and binding status of the steps for the entire project.
                        You can use this report to find both unused code in the automation layer and scenario steps that have no definition yet.
                        See <see href="https://github.com/techtalk/SpecFlow/wiki/Reporting#step-definition-report">SpecFlow Documentation</see> for more information.
                        </summary>
                        
                        <param name="projectFile">The path of the project file containing the feature files.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.SpecFlow.SpecFlowAliasesMetadata.SpecFlowTestExecutionReport(System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath)">
                        <summary>
                        Creates a formatted HTML report of a test execution.
                        The report contains a summary about the executed tests and the result and also a detailed report for the individual scenario executions.
                        See <see href="https://github.com/techtalk/SpecFlow/wiki/Reporting#test-execution-report">SpecFlow Documentation</see> for more information.
                        </summary>
                        
                        <param name="action">The action to run SpecFlow for. Supported actions are: MSTest, NUnit3 and XUnit2</param>
                        <param name="projectFile">The path of the project file containing the feature files.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.SpecFlow.SpecFlowAliasesMetadata.SpecFlowTestExecutionReport(System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.SpecFlow.TestExecutionReport.SpecFlowTestExecutionReportSettings)">
                        <summary>
                        Creates a formatted HTML report of a test execution.
                        The report contains a summary about the executed tests and the result and also a detailed report for the individual scenario executions.
                        See <see href="https://github.com/techtalk/SpecFlow/wiki/Reporting#test-execution-report">SpecFlow Documentation</see> for more information.
                        </summary>
                        
                        <param name="action">The action to run SpecFlow for. Supported actions are: MSTest, NUNit, NUNit3, XUnit and XUnit2</param>
                        <param name="projectFile">The path of the project file containing the feature files.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.TextTransform.TextTransformAliasesMetadata.TransformTemplate(Cake.Core.IO.FilePath)">
                        <summary>
                        Transform a text template.
                        </summary>
                        <example>
                        <code>
                        // Transform a .tt template.
                        var transform = File("./src/Cake/Transform.tt");
                        TransformTemplate(transform);
                        </code>
                        </example>
                        
                        <param name="sourceFile">The source file.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.TextTransform.TextTransformAliasesMetadata.TransformTemplate(Cake.Core.IO.FilePath,Cake.Common.Tools.TextTransform.TextTransformSettings)">
                        <summary>
                        Transform a text template.
                        </summary>
                        <example>
                        <code>
                        // Transform a .tt template.
                        var transform = File("./src/Cake/Transform.tt");
                        TransformTemplate(transform, new TextTransformSettings { OutputFile="./src/Cake/Transform.cs" });
                        </code>
                        </example>
                        
                        <param name="sourceFile">The source file.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.VSTest.VSTestAliasesMetadata.VSTest(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all VSTest unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var paths = new List&lt;FilePath&gt;() { "./assemblydir1", "./assemblydir2" };
                        VSTest(paths);
                        </code>
                        </example>
                        
                        <param name="assemblyPaths">The assembly paths.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.VSTest.VSTestAliasesMetadata.VSTest(System.String)">
                        <summary>
                        Runs all VSTest unit tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        VSTest("./Tests/*.UnitTests.dll");
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.VSTest.VSTestAliasesMetadata.VSTest(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.VSTest.VSTestSettings)">
                        <summary>
                        Runs all VSTest unit tests in the specified assemblies.
                        </summary>
                        <example>
                        <code>
                        var paths = new List&lt;FilePath&gt;() { "./assemblydir1", "./assemblydir2" };
                        VSTest(paths, new VSTestSettings() { InIsolation = true });
                        </code>
                        </example>
                        
                        <param name="assemblyPaths">The assembly paths.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.VSTest.VSTestAliasesMetadata.VSTest(System.String,Cake.Common.Tools.VSTest.VSTestSettings)">
                        <summary>
                        Runs all VSTest unit tests in the assemblies matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        VSTest("./Tests/*.UnitTests.dll", new VSTestSettings() { Logger = VSTestLogger.Trx });
                        </code>
                        </example>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXCandle(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.CandleSettings)">
                        <summary>
                        Compiles all <c>.wxs</c> sources in the provided source files.
                        </summary>
                        <example>
                        <code>
                        var files = GetFiles("./src/*.wxs");
                        CandleSettings settings = new CandleSettings {
                            Architecture = Architecture.X64,
                            Verbose = true
                            };
                        WiXCandle(files, settings);
                        </code>
                        </example>
                        
                        <param name="sourceFiles">The source files.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXCandle(System.String,Cake.Common.Tools.WiX.CandleSettings)">
                        <summary>
                        Compiles all <c>.wxs</c> sources matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        CandleSettings settings = new CandleSettings {
                            Architecture = Architecture.X64,
                            Verbose = true
                            };
                        WiXCandle("./src/*.wxs", settings);
                        </code>
                        </example>
                        
                        <param name="pattern">The globbing pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType)">
                        <summary>
                        Harvests from the desired files.
                        </summary>
                        <example>
                        <code>
                        var harvestFile = File("./tools/Cake/Cake.Core.dll");
                        var filePath = File("Wix.File.wxs");
                        WiXHeat(harvestFile, filePath, WiXHarvestType.File);
                        </code>
                        </example>
                        
                        <param name="objectFile">The object file.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType)">
                        <summary>
                        Harvests files for a website or performance.
                        </summary>
                        <example>
                        <code>
                        var filePath = File("Wix.Website.wxs");
                        WiXHeat("Default Web Site", filePath, WiXHarvestType.Website);
                        </code>
                        </example>
                        
                        <param name="harvestTarget">The harvest target.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType)">
                        <summary>
                        Harvests files in the provided object files.
                        </summary>
                        <example>
                        <code>
                        DirectoryPath harvestDirectory = Directory("./src");
                        var filePath = new FilePath("Wix.Directory.wxs");
                        WiXHeat(harvestDirectory, filePath, WiXHarvestType.Dir);
                        </code>
                        </example>
                        
                        <param name="directoryPath">The object files.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType,Cake.Common.Tools.WiX.Heat.HeatSettings)">
                        <summary>
                        Harvests from the desired files.
                        </summary>
                        <example>
                        <code>
                        var harvestFiles = File("./tools/Cake/*.dll");
                        var filePath = File("Wix.File.wxs");
                        WiXHeat(harvestFiles, filePath, WiXHarvestType.File, new HeatSettings { NoLogo = true });
                        </code>
                        </example>
                        
                        <param name="objectFile">The object file.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType,Cake.Common.Tools.WiX.Heat.HeatSettings)">
                        <summary>
                        Harvests files for a website or performance.
                        </summary>
                        <example>
                        <code>
                        var filePath = File("Wix.Website.wxs");
                        WiXHeat("Default Web Site", filePath, WiXHarvestType.Website, new HeatSettings { NoLogo = true });
                        </code>
                        </example>
                        
                        <param name="harvestTarget">The harvest target.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXHeat(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,Cake.Common.Tools.WiX.Heat.WiXHarvestType,Cake.Common.Tools.WiX.Heat.HeatSettings)">
                        <summary>
                        Harvests files in the provided directory path.
                        </summary>
                        <example>
                        <code>
                        DirectoryPath harvestDirectory = Directory("./src");
                        var filePath = File("Wix.Directory.wxs");
                        Information(MakeAbsolute(harvestDirectory).FullPath);
                        WiXHeat(harvestDirectory, filePath, WiXHarvestType.Dir, new HeatSettings { NoLogo = true });
                        </code>
                        </example>
                        
                        <param name="directoryPath">The directory path.</param>
                        <param name="outputFile">The output file.</param>
                        <param name="harvestType">The WiX harvest type.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXLight(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.LightSettings)">
                        <summary>
                        Links all <c>.wixobj</c> files in the provided object files.
                        </summary>
                        <example>
                        <code>
                        var files = GetFiles("./src/*.wxs");
                        LightSettings settings = new LightSettings {
                            RawArguments = "-O1 -pedantic -v"
                            };
                        WiXLight(files, settings);
                        </code>
                        </example>
                        
                        <param name="objectFiles">The object files.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliasesMetadata.WiXLight(System.String,Cake.Common.Tools.WiX.LightSettings)">
                        <summary>
                        Links all <c>.wixobj</c> files matching the specified pattern.
                        </summary>
                        <example>
                        <code>
                        LightSettings settings = new LightSettings {
                            RawArguments = "-O1 -pedantic -v"
                            };
                        WiXLight("./src/*.wixobj", settings);
                        </code>
                        </example>
                        
                        <param name="pattern">The globbing pattern.</param>
                        <param name="settings">The settings.</param>
                    
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliasesMetadata.XBuild(Cake.Core.IO.FilePath)">
                        <summary>
                        Builds the specified solution using XBuild.
                        </summary>
                        
                        <param name="solution">The solution to build.</param>
                        <example>
                        <code>
                        XBuild("./src/Cake.sln");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliasesMetadata.XBuild(Cake.Core.IO.FilePath,Cake.Common.Tools.XBuild.XBuildSettings)">
                        <summary>
                        Builds the specified solution using XBuild.
                        </summary>
                        
                        <param name="solution">The solution to build.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        XBuild("./src/Cake.sln", new XBuildSettings {
                            Verbosity = Verbosity.Minimal,
                            ToolVersion = XBuildToolVersion.NET40,
                            Configuration = "Release"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliasesMetadata.XBuild(Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.XBuild.XBuildSettings})">
                        <summary>
                        Builds the specified solution using XBuild.
                        </summary>
                        
                        <param name="solution">The solution to build.</param>
                        <param name="configurator">The settings configurator.</param>
                        <example>
                        <code>
                        XBuild("./src/Cake.sln", configurator =&gt;
                            configurator.SetConfiguration("Debug")
                                .SetVerbosity(Verbosity.Minimal)
                                .UseToolVersion(XBuildToolVersion.NET40));
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Runs all xUnit.net v2 tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        XUnit2(new []{
                            "./src/Cake.Common.Tests/bin/Release/Cake.Common.Tests.dll",
                            "./src/Cake.Core.Tests/bin/Release/Cake.Core.Tests.dll",
                            "./src/Cake.NuGet.Tests/bin/Release/Cake.NuGet.Tests.dll",
                            "./src/Cake.Tests/bin/Release/Cake.Tests.dll"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all xUnit.net tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        XUnit2(testAssemblies);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.String)">
                        <summary>
                        Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        XUnit2("./src/**/bin/Release/*.Tests.dll");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnit2Settings)">
                        <summary>
                        Runs all xUnit.net v2 tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        XUnit2(testAssemblies,
                             new XUnit2Settings {
                                Parallelism = ParallelismOption.All,
                                HtmlReport = true,
                                NoAppDomain = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnit2Settings)">
                        <summary>
                        Runs all xUnit.net v2 tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        XUnit2(new []{
                            "./src/Cake.Common.Tests/bin/Release/Cake.Common.Tests.dll",
                            "./src/Cake.Core.Tests/bin/Release/Cake.Core.Tests.dll",
                            "./src/Cake.NuGet.Tests/bin/Release/Cake.NuGet.Tests.dll",
                            "./src/Cake.Tests/bin/Release/Cake.Tests.dll"
                             },
                             new XUnit2Settings {
                                Parallelism = ParallelismOption.All,
                                HtmlReport = true,
                                NoAppDomain = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2AliasesMetadata.XUnit2(System.String,Cake.Common.Tools.XUnit.XUnit2Settings)">
                        <summary>
                        Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        XUnit2("./src/**/bin/Release/*.Tests.dll",
                             new XUnit2Settings {
                                Parallelism = ParallelismOption.All,
                                HtmlReport = true,
                                NoAppDomain = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.Collections.Generic.IEnumerable{System.String})">
                        <summary>
                        Runs all xUnit.net tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        XUnit(new []{
                            "./src/Cake.Common.Tests/bin/Release/Cake.Common.Tests.dll",
                            "./src/Cake.Core.Tests/bin/Release/Cake.Core.Tests.dll",
                            "./src/Cake.NuGet.Tests/bin/Release/Cake.NuGet.Tests.dll",
                            "./src/Cake.Tests/bin/Release/Cake.Tests.dll"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
                        <summary>
                        Runs all xUnit.net tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        XUnit(testAssemblies);
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.String)">
                        <summary>
                        Runs all xUnit.net tests in the assemblies matching the specified pattern.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <example>
                        <code>
                        XUnit("./src/**/bin/Release/*.Tests.dll");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnitSettings)">
                        <summary>
                        Runs all xUnit.net tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        var testAssemblies = GetFiles("./src/**/bin/Release/*.Tests.dll");
                        XUnit(testAssemblies,
                             new XUnitSettings {
                                HtmlReport = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnitSettings)">
                        <summary>
                        Runs all xUnit.net tests in the specified assemblies.
                        </summary>
                        
                        <param name="assemblies">The assemblies.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        XUnit(new []{
                            "./src/Cake.Common.Tests/bin/Release/Cake.Common.Tests.dll",
                            "./src/Cake.Core.Tests/bin/Release/Cake.Core.Tests.dll",
                            "./src/Cake.NuGet.Tests/bin/Release/Cake.NuGet.Tests.dll",
                            "./src/Cake.Tests/bin/Release/Cake.Tests.dll"
                             },
                             new XUnitSettings {
                                HtmlReport = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliasesMetadata.XUnit(System.String,Cake.Common.Tools.XUnit.XUnitSettings)">
                        <summary>
                        Runs all xUnit.net tests in the assemblies matching the specified pattern.
                        </summary>
                        
                        <param name="pattern">The pattern.</param>
                        <param name="settings">The settings.</param>
                        <example>
                        <code>
                        XUnit("./src/**/bin/Release/*.Tests.dll",
                             new XUnitSettings {
                                HtmlReport = true,
                                OutputDirectory = "./build"
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekAliasesMetadata.XmlPeek(Cake.Core.IO.FilePath,System.String)">
                        <summary>
                        Gets the value of a target node.
                        </summary>
                        <returns>The value found at the given XPath query.</returns>
                        
                        <param name="filePath">The target file.</param>
                        <param name="xpath">The xpath of the node to get.</param>
                        <example>
                        <code>
                        string autoFacVersion = XmlPeek("./src/Cake/packages.config", "/packages/package[@id='Autofac']/@version");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekAliasesMetadata.XmlPeek(Cake.Core.IO.FilePath,System.String,Cake.Common.Xml.XmlPeekSettings)">
                        <summary>
                        Get the value of a target node.
                        </summary>
                        <returns>The value found at the given XPath query.</returns>
                        
                        <param name="filePath">The target file.</param>
                        <param name="xpath">The xpath of the nodes to set.</param>
                        <param name="settings">Additional settings to tweak Xml Peek behavior.</param>
                        <example>
                        <code>
                        <para>XML document:</para>
                        <![CDATA[
                        <?xml version="1.0" encoding="UTF-8"?>
                        <pastery xmlns = "http://cakebuild.net/pastery" >
                            < cake price="1.62" />
                        </pastery>
                        ]]>
                        </code>
                        <para>XmlPeek usage:</para>
                        <code>
                        string version = XmlPeek("./pastery.xml", "/pastery:pastery/pastery:cake/@price",
                            new XmlPeekSettings {
                                Namespaces = new Dictionary&lt;string, string&gt; {{ "pastery", "http://cakebuild.net/pastery" }}
                            });
                        string unknown = XmlPeek("./pastery.xml", "/pastery:pastery/pastery:cake/@recipe",
                            new XmlPeekSettings {
                                Namespaces = new Dictionary&lt;string, string&gt; {{ "pastery", "http://cakebuild.net/pastery" }},
                                SuppressWarnings = true
                            });
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliasesMetadata.XmlPoke(Cake.Core.IO.FilePath,System.String,System.String)">
                        <summary>
                        Set the value of, or remove, target nodes.
                        </summary>
                        
                        <param name="filePath">The target file.</param>
                        <param name="xpath">The xpath of the nodes to set.</param>
                        <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
                        <example>
                          <para>
                          Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
                          to <c>productionhost.somecompany.com</c>.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
                        });
                            ]]>
                          </code>
                        </example>
                        <example>
                          <para>
                          Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
                        </Commands>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\\Commands.xsd", new XmlPokeSettings {
                                Namespaces = new Dictionary<string, string> {
                                    { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                                }
                            });
                        });
                            ]]>
                          </code>
                        <example>
                          <para>
                          Remove an app setting from a config file.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                                <add key="testing" value="true" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/configuration/appSettings/add[@testing]", null);
                        });
                            ]]>
                          </code>
                        </example>
                        <para>
                        Credit to NAnt for the original example.
                        http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
                        </para>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliasesMetadata.XmlPoke(Cake.Core.IO.FilePath,System.String,System.String,Cake.Common.Xml.XmlPokeSettings)">
                        <summary>
                        Set the value of, or remove, target nodes.
                        </summary>
                        
                        <param name="filePath">The target file.</param>
                        <param name="xpath">The xpath of the nodes to set.</param>
                        <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
                        <param name="settings">Additional settings to tweak Xml Poke behavior.</param>
                        <example>
                          <para>
                          Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
                          to <c>productionhost.somecompany.com</c>.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
                        });
                            ]]>
                          </code>
                        </example>
                        <example>
                          <para>
                          Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
                        </Commands>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\\Commands.xsd", new XmlPokeSettings {
                                Namespaces = new Dictionary<string, string> {
                                    { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                                }
                            });
                        });
                            ]]>
                          </code>
                        <example>
                          <para>
                          Remove an app setting from a config file.
                          </para>
                          <para>XML file:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                                <add key="testing" value="true" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var file = File("test.xml");
                            XmlPoke(file, "/configuration/appSettings/add[@testing]", null);
                        });
                            ]]>
                          </code>
                        </example>
                        <para>
                        Credit to NAnt for the original example.
                        http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
                        </para>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliasesMetadata.XmlPokeString(System.String,System.String,System.String)">
                        <summary>
                        Set the value of, or remove, target nodes.
                        </summary>
                        
                        <param name="sourceXml">The source xml to transform.</param>
                        <param name="xpath">The xpath of the nodes to set.</param>
                        <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
                        <returns>Resulting XML.</returns>
                        <example>
                          <para>
                          Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
                          to <c>productionhost.somecompany.com</c>.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
                        });
                            ]]>
                          </code>
                        </example>
                        <example>
                          <para>
                          Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
                        </Commands>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\\Commands.xsd", new XmlPokeSettings {
                                Namespaces = new Dictionary<string, string> {
                                    { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                                }
                            });
                        });
                            ]]>
                          </code>
                        <example>
                          <para>
                          Remove an app setting from a config file.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                                <add key="testing" value="true" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/configuration/appSettings/add[@testing]", null);
                        });
                            ]]>
                          </code>
                        </example>
                        <para>
                        Credit to NAnt for the original example.
                        http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
                        </para>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliasesMetadata.XmlPokeString(System.String,System.String,System.String,Cake.Common.Xml.XmlPokeSettings)">
                        <summary>
                        Set the value of, or remove, target nodes.
                        </summary>
                        
                        <param name="sourceXml">The source xml to transform.</param>
                        <param name="xpath">The xpath of the nodes to set.</param>
                        <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
                        <param name="settings">Additional settings to tweak Xml Poke behavior.</param>
                        <returns>Resulting XML.</returns>
                        <example>
                          <para>
                          Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
                          to <c>productionhost.somecompany.com</c>.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
                        });
                            ]]>
                          </code>
                        </example>
                        <example>
                          <para>
                          Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
                        </Commands>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\\Commands.xsd", new XmlPokeSettings {
                                Namespaces = new Dictionary<string, string> {
                                    { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                                }
                            });
                        });
                            ]]>
                          </code>
                        <example>
                          <para>
                          Remove an app setting from a config file.
                          </para>
                          <para>XML string:</para>
                          <code>
                            <![CDATA[
                        <?xml version="1.0" encoding="utf-8" ?>
                        <configuration>
                            <appSettings>
                                <add key="server" value="testhost.somecompany.com" />
                                <add key="testing" value="true" />
                            </appSettings>
                        </configuration>
                            ]]>
                          </code>
                          <para>Cake Task:</para>
                          <code>
                            <![CDATA[
                        Task("Transform")
                            .Does(() =>
                        {
                            var result = XmlPokeString(xmlString, "/configuration/appSettings/add[@testing]", null);
                        });
                            ]]>
                          </code>
                        </example>
                        <para>
                        Credit to NAnt for the original example.
                        http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
                        </para>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAliasMetadata.XmlTransform(System.String,System.String)">
                         <summary>
                         Performs XML XSL transformation
                         </summary>
                         
                         <param name="xsl">XML style sheet.</param>
                         <param name="xml">XML data.</param>
                         <returns>Transformed XML string.</returns>
                         <example>
                         <code>
                         <para>This example code will convert xml to a new xml strucure using XmlTransform alias.</para>
                         <![CDATA[
                         string xsl = @"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
                           <xsl:output method=""xml"" omit-xml-declaration=""yes"" />
                           <xsl:template match=""/"">
                             <xsl:for-each select=""pastery/cake"" >
                                 <price><xsl:value-of select=""@price""/></price>
                               </xsl:for-each>
                           </xsl:template>
                         </xsl:stylesheet>";
                        
                         string xml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
                         <pastery>
                             <cake price=""1.62"" />
                         </pastery>";
                        
                         var priceTag = XmlTransform(xsl, xml);
                         ]]>
                         </code>
                         <para>Result:</para>
                         <code>
                         <![CDATA[<price>1.62</price>]]>
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAliasMetadata.XmlTransform(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
                        <summary>
                        Performs XML XSL transformation
                        </summary>
                        
                        <param name="xslPath">Path to xml style sheet.</param>
                        <param name="xmlPath">Path xml data.</param>
                        <param name="resultPath">Transformation result path, will overwrite if exists.</param>
                        <example>
                        <code>
                        <para>This example code will convert the Cake nuspec into html using the XmlTransform alias.</para>
                        <para>XML stylesheet:</para>
                        <![CDATA[
                        <?xml version="1.0" ?>
                        <xsl:stylesheet
                          version="1.0"
                          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          xmlns:p="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"
                          exclude-result-prefixes="p"
                          >
                          <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
                          <xsl:template match="/">
                            <html lang="en" class="static">
                              <head>
                                <title>
                                  <xsl:for-each select="package/p:metadata">
                                      <xsl:value-of select="p:id"/>
                                  </xsl:for-each>
                                </title>
                              </head>
                              <body>
                                  <xsl:for-each select="package/p:metadata">
                                    <h1>
                                      <xsl:value-of select="p:id"/>
                                    </h1>
                                    <h2>Description</h2>
                                    <i><xsl:value-of select="p:description"/></i>
                                  </xsl:for-each>
                                <h3>Files</h3>
                                <ul>
                                  <xsl:for-each select="package/files/file" >
                                    <li><xsl:value-of select="@src"/></li>
                                  </xsl:for-each>
                                </ul>
                              </body>
                            </html>
                          </xsl:template>
                        </xsl:stylesheet>
                        ]]>
                        </code>
                        <para>XmlTransform usage:</para>
                        <code>
                        XmlTransform("./nuspec.xsl", "./nuspec/Cake.nuspec", "./Cake.htm");
                        </code>
                        </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAliasMetadata.XmlTransform(System.String,System.String,Cake.Common.Xml.XmlTransformationSettings)">
                         <summary>
                         Performs XML XSL transformation
                         </summary>
                         
                         <param name="xsl">XML style sheet.</param>
                         <param name="xml">XML data.</param>
                         <param name="settings">Optional settings for result file xml writer</param>
                         <returns>Transformed XML string.</returns>
                         <example>
                         <code>
                         <para>This example code will convert specific part of xml to plaintext using XmlTransform alias.</para>
                         <![CDATA[string xsl = @"<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
                           <xsl:output method=""text"" omit-xml-declaration=""yes"" indent=""no""/>
                           <xsl:strip-space elements=""*""/>
                           <xsl:template match=""pastery/cake""><xsl:value-of select=""@price""/></xsl:template>
                         </xsl:stylesheet>";
                        
                         string xml = @"<?xml version=""1.0"" encoding=""UTF-8""?>
                         <pastery>
                             <cake price=""1.62"" />
                         </pastery>";
                        
                         var text = XmlTransform(xsl, xml, new XmlTransformationSettings {
                             ConformanceLevel = System.Xml.ConformanceLevel.Fragment, Encoding = Encoding.ASCII });
                         ]]>
                         </code>
                         </example>
                    
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAliasMetadata.XmlTransform(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Xml.XmlTransformationSettings)">
                        <summary>
                        Performs XML XSL transformation
                        </summary>
                        
                        <param name="xslPath">Path to xml style sheet.</param>
                        <param name="xmlPath">Path xml data.</param>
                        <param name="resultPath">Transformation result path.</param>
                        <param name="settings">Optional settings for result file xml writer</param>
                        <example>
                        <code>
                        <para>This example code will convert the Cake nuspec into html using the XmlTransform alias,
                        specifying that result should be indented and using Unicode encoding.</para>
                        <para>XML stylesheet:</para>
                        <![CDATA[
                        <?xml version="1.0" ?>
                        <xsl:stylesheet
                          version="1.0"
                          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          xmlns:p="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"
                          exclude-result-prefixes="p"
                          >
                          <xsl:output method="xml" indent="yes" omit-xml-declaration="yes" />
                          <xsl:template match="/">
                            <html lang="en" class="static">
                              <head>
                                <title>
                                  <xsl:for-each select="package/p:metadata">
                                      <xsl:value-of select="p:id"/>
                                  </xsl:for-each>
                                </title>
                              </head>
                              <body>
                                  <xsl:for-each select="package/p:metadata">
                                    <h1>
                                      <xsl:value-of select="p:id"/>
                                    </h1>
                                    <h2>Description</h2>
                                    <i><xsl:value-of select="p:description"/></i>
                                  </xsl:for-each>
                                <h3>Files</h3>
                                <ul>
                                  <xsl:for-each select="package/files/file" >
                                    <li><xsl:value-of select="@src"/></li>
                                  </xsl:for-each>
                                </ul>
                              </body>
                            </html>
                          </xsl:template>
                        </xsl:stylesheet>
                        ]]>
                        </code>
                        <para>XmlTransform usage:</para>
                        <code>
                        XmlTransform("./nuspec.xsl", "./nuspec/Cake.nuspec", "./Cake.htm",
                            new XmlTransformationSettings { Indent = true, Encoding = Encoding.Unicode});
                        </code>
                        </example>
                    
        </member>
    </members>
</doc>
